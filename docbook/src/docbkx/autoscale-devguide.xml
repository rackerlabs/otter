<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash "&#x2013;">
<!ENTITY mdash "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY GET '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

<!ENTITY PRODNAME "Rackspace Auto Scale">
<!-- in PDF: for line 1 on the cover page -->
<!ENTITY PRODABBV "Rackspace Auto Scale">
<!-- in PDF: for page headers -->
<!ENTITY PROD "Auto Scale">
<!-- in body -->

<!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
<!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
<!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
<!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
<!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">

<!ENTITY CHECK '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
    <imagedata fileref="img/Check_mark_23x20_02.svg" format="SVG" scale="60" />
</imageobject>
</inlinemediaobject>'>

<!ENTITY ARROW '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
    <imagedata fileref="img/Arrow_east.svg" format="SVG" scale="60" />
</imageobject>
</inlinemediaobject>'>

<!-- Useful for specs -->
<!ENTITY MAY '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MAY</emphasis>'>
<!ENTITY SHOULD '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD</emphasis>'>
<!ENTITY MUST '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST</emphasis>'>
<!ENTITY MUST_NOT '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST NOT</emphasis>'> ]>

<book version="5.0" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:svg="http://www.w3.org/2000/svg" xmlns:m="http://www.w3.org/1998/Math/MathML"
xmlns:html="http://www.w3.org/1999/xhtml" xml:id="autoscale-devguide">
    <!-- The &PRODNAME; and &PRODABBV; are set in the entities at the top of this document -->
    <title>&PRODNAME; Developer Guide</title>
    <titleabbrev>&PRODABBV; Developer Guide</titleabbrev>
    <?rax title.font.size="35px" subtitle.font.size="20px" canonical.url.base="http://docs.rackspace.com/cas/api/v1.0/autoscale-devguide/content"
    ?>
        <info>
            <releaseinfo>API v1.0</releaseinfo>
            <productname>&PRODNAME;</productname>
            <!-- enter the publication date of this document; in revhistory, explain what changed -->
            <pubdate/>
            <copyright>
            <year>2014</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
            <legalnotice role="rs-api">
                <annotation>
                    <remark>Copyright details are filled in by the template.</remark>
                </annotation>
            </legalnotice>
            <revhistory>
                <revision
                    xmlns:raxm="http://docs.rackspace.com/api/metadata">
                    <date>2014-04-08</date>
                    <revdescription>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>Removed duplicate parameter descriptions. Improved "at" parameter description. Removed internal bug numbers. Modified titles per new convention.</para>
                            </listitem>
                        </itemizedlist>
                    </revdescription>
                </revision>
                <revision
                xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <date>2014-03-26</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Added IAD to
                                service endpoints in the Getting
                                Started Guide and added comment about
                                verifying the service endpoints by
                                issuing the call being the best way to
                                know what they are.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
                <revision>
                <date>2014-03-19</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Un-hid RBAC section.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2013-11-19</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updating content for UA</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
                <revision>
                    <date>2013-08-21</date>
                    <revdescription>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>Improved code sample for List All Group Details.</para>
                            </listitem>
                        </itemizedlist>
                    </revdescription>
                </revision>
                <revision>
                    <date>2013-08-13</date>
                    <revdescription>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>Initial Early Access release.</para>
                            </listitem>
                        </itemizedlist>
                    </revdescription>
                </revision>
                <revision>
                    <date>2013-07-22</date>
                    <revdescription>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>Initial internal draft of full developer guide for Early Access release.</para>
                            </listitem>
                        </itemizedlist>
                    </revdescription>
                </revision>
                <revision>
                    <date>2013-07-02</date>
                    <revdescription>
                        <itemizedlist spacing="compact">
                            <listitem>
                                <para>Initial internal draft of API Operations chapter for Preview release.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </revdescription>
                </revision>
            </revhistory>
            <!-- raxm:product appears in WAR for publication: cas-v1.0-autoscale-devguide-internal.war -->
            <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <raxm:displayname>API Developer Guide</raxm:displayname>
                <raxm:product version="v1.0">cas</raxm:product>
                <raxm:priority>20</raxm:priority>
            </raxm:metadata>
        </info>
        <chapter xml:id="Overview">
            <title>Overview</title>
            <para>&PRODNAME; is a web service that automatically scales resources in response to an increase
                or decrease in overall workload based on user-defined policies. You can set up a schedule
                for launching &PROD; or define an event that is triggered by Cloud Monitoring. You can
                also specify a minimum and maximum number of cloud servers, the amount of resources that
                you want to increase or decrease, and the thresholds in Cloud Monitoring that trigger
                the scaling activities.</para>
            <para>
                To use &PROD;, you define a scaling group consisting of cloud servers and cloud load balancers. Then
                you define policies, either schedule-based or monitoring-based. For monitoring-based
                policies, you define cloud monitoring alerts to watch the group's activity, and you define
                scaling rules to change the scaling group's configuration in response to alerts. For
                schedule-based policies, you simply set a schedule. Because you can change a scaling
                group's configuration in response to changing workloads, you can begin with a minimal
                cloud configuration and grow only when the cost of that growth is justified.</para>
            <para>In this chapter, you will learn about the following:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <link linkend="Intended_Audience-d1e166">Intended audience
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Doc_Change_History">Document change history
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Resources-000">Additional resources
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Pricing_SLA-d1e1362">Pricing and service level</link>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para></para>
            <section xml:id="Intended_Audience-d1e166">
                <title>Intended audience</title>
                <para>This document is intended for software developers who are interested in developing applications
                    that use the Rackspace &PROD; API. To use this API, you need the following skills:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>RESTful web services</para>
                    </listitem>
                    <listitem>
                        <para>HTTP/1.1 conventions</para>
                    </listitem>
                    <listitem>
                        <para>JSON data serialization formats</para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="Doc_Change_History">
                <title>Document change history</title>
                <para>
                    This version of the document replaces and obsoletes all previous versions. The most recent changes are
                    described in the following table:
                </para>
                <?rax revhistory?>
            </section>
            <!-- Resources section, suggesting other places to go for info,
is external so it's handy for Getting Started to share -->
            <xi:include href="chapters/resources.xml" />
            <!-- -->
            <section xml:id="Pricing_SLA-d1e1362">
                <title>Pricing and service level</title>
                <para>&PRODNAME; relies on other services that are part of the Rackspace Cloud; your use of
                    those services through the API will be billed as per the pricing schedule published
                    for each service:
                    <itemizedlist>
                        <listitem>
                            <para>For Rackspace Next Gen Cloud Servers, pricing is published at
                                <link xlink:href="http://www.rackspace.com/cloud/servers/pricing">http://www.rackspace.com/cloud/servers/pricing</link>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>For Rackspace Cloud Load Balancers, pricing is published at
                                <link xlink:href="http://www.rackspace.com/cloud/load-balancing/pricing/">http://www.rackspace.com/cloud/load-balancing/pricing/</link>.
                            </para>
                        </listitem>
                        <listitem>
                            <para>For Rackspace Cloud Monitoring, pricing is published at
                                <link xlink:href="http://www.rackspace.com/cloud/monitoring/pricing/">http://www.rackspace.com/cloud/monitoring/pricing/</link>.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </section>
        </chapter>
        <chapter xml:id="Auto_Scale_Core_Concepts">
            <title>Auto Scale core concepts</title>
            <para>To use the &PROD; API effectively, you should understand several key concepts:
            </para>
            <section xml:id="Glossary">
                <title>Glossary</title>
                <!-- Glossary section, defining basic terms,
is external so it's handy for Getting Started to share -->
                <xi:include href="chapters/glossary.xml" />
                <!-- -->
            </section>

            <section xml:id="Scaling_groups" xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <title>Scaling groups</title>
                <para>The scaling group is at the heart of an Auto Scale deployment. The scaling group specifies
                    the basic elements of the Auto Scale configuration. It manages how many servers can
                    participate in the scaling group. It also specifies information related to load balancers
                    if your configuration uses a load balancer.</para>
                <para>When you create a scaling group, you specify the details for the following two configurations:</para>
                <itemizedlist>
                    <listitem>
                        <para>Group Configuration</para>
                    </listitem>
                    <listitem>
                        <para>Launch Configuration</para>
                    </listitem>
                </itemizedlist>
                <para>The following table provides a description of both configuration types.</para>
                <para>
                    <table>
                        <caption>Scaling Group Configurations</caption>
                        <col width="20%" />
                        <col width="60%" />
                        <thead>
                            <tr>
                                <td>Configuration</td>
                                <td>Description</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Group Configuration</td>
                                <td>Outlines the basic elements of the Auto Scale configuration. The group
                                    configuration manages how many servers can participate in the scaling
                                    group. It sets a minimum and maximum limit for the number of entities
                                    that can be used in the scaling process. It also specifies information
                                    related to load balancers.
                                </td>
                            </tr>
                            <tr>
                                <td>Launch Configuration</td>
                                <td>Creates a blueprint for how new servers will be created. The launch configuration
                                    specifies what type of server image will be started on launch, what
                                    flavor the new server is, and which load balancer the new server
                                    connects to.</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
            </section>
            <section xml:id="Authenticated_Webhooks_and_Anonymous_Webhooks" xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <title>Webhooks and capability URLs</title>
                <para>Auto Scale uses webhooks to initiate scaling events. A webhook is an industry-standard
                    protocol for sending events between systems; for Auto Scale, they are used to execute
                    policies. A webhook consists of an HTTP callback that is triggered by some user-defined
                    event, such as an alarm that is set through Cloud Monitoring or another monitoring
                    service. When that event occurs, the source site makes an HTTP request to the URI
                    configured for the webhook.</para>
                <para>A webhook contains a POST call to a defined URL, potentially with a payload in the POST
                    body. You can send webhooks with a simple call in the library that you are using.
                    You can also send them manually via cURL:</para>
                <example>
                    <title>POST request to execute a webhook</title>
                    <programlisting>curl -v https://example.com/webhook -X POST -d "payload=payload"</programlisting>
                </example>
                <para>Auto Scale only supports anonymous webhooks. In regular webhooks, the {webhook_version}/{webhook_hash}
                    is specified by URL. In anonymous webhooks, the URL is replaced with a hash that
                    is known only to the issuer— because no authentication is needed, the webhook is
                    considered "anonymous."</para>
                <para>Auto Scale uses Capability URLs in conjunction with webhooks. Capability URLs are URLs
                    that give authorization for a certain action or event. If you know the URL, you have
                    access to it and you can use the URL to trigger a specific event. Capability URLs
                    are usually long, and random, and cannot be guessed by a user.</para>
                <para>When a webhook is created, Auto Scale creates values for the
                    <parameter>capabilityVersion</parameter>and
                    <parameter>capabilityHash</parameter>parameters. These values are created per webhook, not per
                    policy. When you create a webhook, you associate it with a policy. The response to
                    the webhook creation request includes a single capability URL that is also, by inheritance,
                    associated with the policy.</para>
                <para>The Auto Scale webhook architecture allows Auto Scale to be integrated with other systems,
                    for example, monitoring systems. So, now you have this URL that will execute a specific
                    policy and you can fire off that URL based on events happening outside of Auto Scale.</para>
                <para>To execute a capability URL, locate the URL in your webhook, and then submit a
                    <command>POST</command>request against it, as shown in the following example:</para>
                <example>
                    <title>POST request to execute a capability URL</title>
                    <programlisting language="json">
                        <xi:include href="./samples/reqExecuteCapabilityURL.json" parse="text" />
                    </programlisting>
                </example>
                <para>Executing a capability URL or an anonymous webhook will always return a 202,
                    <parameter>Accepted</parameter>, response code, even if the request fails because of an invalid
                    configuration. This is done to prevent information leakage.</para>
                <para>
                    <note>
                        <para>To execute anonymous webhooks and capability URLs, no authentication is needed.
                            You can use a capability URL to trigger multiple webhooks.</para>
                    </note>
                </para>
            </section>
            <section xml:id="Scaling_policies" xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <title>Scaling policies</title>
                <para>Auto Scale uses policies to define the scaling activity that will take place, as well
                    as when and how that scaling activity will take place. Scaling policies specify how
                    to modify the scaling group and its behavior. You can specify multiple policies to
                    manage a scaling group.</para>
                <para>You can create two kinds of Auto Scale policies:</para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>Policies that trigger Auto Scale activities through a webhook.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Policies that trigger Auto Scale activities based on a schedule.
                        </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="Cooldowns" xmlns:raxm="http://docs.rackspace.com/api/metadata">
                <title>Cooldowns</title>
                <para>Auto Scale supports a cooldown feature. A cooldown is a configured period of time that
                    must pass between actions. Cooldowns only apply to webhook-based configurations.
                    By configuring group cooldowns, you control how often a group can have a policy applied,
                    which can help servers scaling up to complete the scale up before another policy
                    is executed. By configuring policy cooldowns, you control how often a policy can
                    be executed, which can help provide quick scale-ups and gradual scale-downs.</para>
                <para>Cooldowns work the following way:
                    <itemizedlist>
                        <listitem>
                            <para>Group cooldowns control how often a group can be modified by denying all
                                policy executions until the cooldown expires—even if conditions exist
                                that would trigger one.</para>
                        </listitem>
                        <listitem>
                            <para>Policy cooldowns control how often a single, specific policy can be executed.
                                For example, a policy cooldown can require at least six hours until any
                                successive scale down policies are reactivated.</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    <note>
                        <para>Cooldown configuration is irrelevant for schedule-based configurations and the
                            Group Cooldown and Policy Cooldown can both be set to 0 (null).</para>
                    </note>
                </para>
            </section>

        </chapter>
        <chapter xml:id="Gen_API_Info-de01">
            <title>General API information</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <link linkend="Authentication-d1e01">Authentication</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="serviceEndpoints">Service access endpoints
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="contractVersion">Contract versions
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Request_Response_Types-d1e903">Request and response types</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Limits-d1e1208">Limits</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="datetimeformat">Date and time format
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="pagination">Pagination</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="server-flavors">Server flavors
                            </link>
                        </para>
                    </listitem>
                    <listitem linkend="audit-log">
                        <para>
                            <link linkend="audit-log">Audit logs</link>
                        </para>
                    </listitem>
                    <listitem linkend="faults-dle101">
                        <para>
                            <link linkend="faults-dle101">Faults</link>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>The &PROD; API is implemented using a RESTful web service interface. Like other products
                in the Rackspace Cloud suite, &PROD; shares a common token-based authentication system
                that allows seamless access between products and services.</para>
            <note>
                <para>All requests to authenticate against and operate the service are performed using SSL
                    over HTTP (HTTPS) on TCP port 443.
                </para>
            </note>
            <section xml:id="Authentication-d1e647">
                <title>Authentication</title>
                <para>
                    <link linkend="Retrieving_Auth_Token">Retrieving the authentication token</link>
                </para>
                <para>Every REST request for &PROD; requires the inclusion of a specific authentication token,
                    supplied by the
                    <code>X-Auth-Token</code>HTTP header. Customers obtain this token by first using the Rackspace
                    Cloud Identity service and supplying a valid user name and API access key.</para>
                <section xml:id="Retrieving_Auth_Token">
                    <title>Retrieving the authentication token</title>
                    <para>The authenticate operation provides users with an authentication token and a list
                        of regional cloud endpoints. The sample requests and responses in this section
                        illustrate a general case. In your authentication request, use your own credentials
                        rather than the sample values shown for
                        <code>username</code>and
                        <code>apiKey</code>. When you authenticate successfully, the response to your authentication
                        request includes a catalog of the services to which you have subscribed rather
                        than the sample values shown.</para>
                    <para>The following table describes a request for an authentication token and the examples
                        that follow show the request and response in JSON format.</para>
                    <table rules="all">
                        <caption>Request for Authentication Token</caption>
                        <tbody>
                            <tr>
                                <td colspan="1">&POST;</td>
                                <td colspan="1">v2.0/tokens</td>
                                <td colspan="4">Authenticate to receive a token and a service catalog.</td>
                            </tr>
                        </tbody>
                    </table>
                    <simpara>Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                    </simpara>
                    <simpara>Error Response Code(s): unauthorized (
                        <errorcode>401</errorcode>), userDisabled (
                        <errorcode>403</errorcode>), badRequest (
                        <errorcode>400</errorcode>), authFault (
                        <errorcode>500</errorcode>), serviceUnavailable (
                        <errorcode>503</errorcode>)</simpara>

                    <example>
                        <title>Authentication request for US endpoint: JSON</title>
                        <programlistingco>
                            <areaspec>
                                <area xml:id="credentials.json.user" units="linecolumn" coords="14 22" />
                                <area xml:id="credentials.json.key" units="linecolumn" coords="15 20" />
                            </areaspec>
                            <programlisting language="json">
                                <xi:include href="samples/reqAuthenticate.json" parse="text" />
                            </programlisting>
                        </programlistingco>
                    </example>
                    <calloutlist>
                        <callout arearefs="credentials.json.user">
                            <para>The
                                <code>username</code>supplied here is your common Rackspace Cloud user name.</para>
                        </callout>
                        <callout arearefs="credentials.json.key">
                            <para>The key is your API access key. You can obtain the key from the
                                <link xlink:href="http://mycloud.rackspace.com/">Rackspace Cloud Control Panel</link>in the
                                <guimenu>&lt;Your Account>
                                </guimenu>/
                                <guimenuitem>API Access
                                </guimenuitem>section.</para>
                        </callout>
                    </calloutlist>


                    <example xml:id="auth-response-example-json">
                        <title>Authentication response for US endpoint: JSON</title>

                        <programlistingco>
                            <areaspec>
                                <area xml:id="response.json.token" units="linecolumn" coords="10 8" />
                                <area xml:id="response.json.dfltregion" units="linecolumn" coords="17 12" />
                                <area xml:id="response.json.role" units="linecolumn" coords="18 12" />
                                <area xml:id="response.json.catalog" units="linecolumn" coords="31 8" />
                                <area xml:id="response.json.service-lb" units="linecolumn" coords="49 16" />
                                <area xml:id="response.json.service-compute" units="linecolumn" coords="65 16" />
                                <area xml:id="response.json.service-monitor" units="linecolumn" coords="87 16" />
                                <area xml:id="response.json.service-autoscale" units="linecolumn" coords="97 16" />
                                <area xml:id="response.json.tenant" units="linecolumn" coords="121 24" />
                                <area xml:id="response.json.url" units="linecolumn" coords="122 24" />
                                <area xml:id="response.json.region" units="linecolumn" coords="124 24" />
                                <area xml:id="response.json.servicename" units="linecolumn" coords="133 16" />
                                <area xml:id="response.json.servicetype" units="linecolumn" coords="134 16" />
                            </areaspec>
                            <programlisting language="json">
                                <xi:include href="samples/resAuthenticate.json" parse="text" />
                            </programlisting>
                        </programlistingco>
                    </example>
                    <note>
                        <para>The information shown in the authentication response example is for US-based
                            accounts. If you authenticate against the UK endpoint, the response you receive
                            shows the service catalog information for UK-based accounts.
                        </para>
                    </note>
                    <calloutlist>
                        <callout arearefs="response.json.token">
                            <para>This token can be presented to a service as evidence of authentication. Tokens
                                are valid for a finite duration; a token's default lifespan is 24 hours.</para>
                            <para>The token's
                                <code>expires</code>attribute denotes the time after which the token automatically
                                becomes invalid. A token can be manually revoked before the time identified
                                by the
                                <code>expires</code>attribute. The
                                <code>expires</code>attribute predicts a token's maximum possible lifespan
                                but does not guarantee that it will reach that lifespan. Users are encouraged
                                to cache a token until it expires.</para>
                            <para>Authentication tokens are typically valid for 24 hours. Applications should
                                be designed to re-authenticate after receiving a
                                <errorcode>401</errorcode>(Unauthorized) response from a service endpoint.</para>
                            <note>
                                <para>The token's expiration time is formatted differently in the US and UK.
                                    These response examples show the US format. For examples of the UK
                                    format, see
                                    <link xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_authenticate_v2.0_tokens_.html">http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_authenticate_v2.0_tokens_.html</link>.</para>
                            </note>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.dfltregion">
                            <para>Users can be assigned a default region. If multiple endpoints are associated
                                with a service in the user's catalog, the endpoint for the user's default
                                region is selected if it is available. In this example, the user's default
                                region is DFW, and several of the services in the user's catalog offer
                                endpoints in that region and the ORD region; whenever possible, the user's
                                work is directed to the DFW region.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.role">
                            <para>Users can be assigned multiple roles, with each role providing specific privileges.
                                In this example,
                                <code>jsmith</code>is the administrative user for the account and holds the
                                fully-privileged
                                <code>identity:admin</code>role. Other users might hold other roles with different
                                privileges. Roles are not necessarily associated with actual job functions
                                such as Administrator, Operator, Developer, Tester, or Trainer.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.catalog">
                            <para>The service catalog lists the services this user can access. In this example,
                                the user can access one database service, one load-balancing service,
                                one compute service (Cloud Servers OpenStack), one object storage service
                                (Cloud Files), one monitoring service (Cloud Monitoring), one autoscale
                                service (&PRODNAME;), and one DNS service. The catalog entry for each
                                service provides at least one endpoint URL for that service. Other information,
                                such as regions, versions, and tenants, is provided if it is relevant
                                to a user's access to a service.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.service-lb">
                            <para>This service catalog entry describes a load-balancing service. To use &PRODNAME;,
                                you must have access to a load-balancing service.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.service-compute">
                            <para>This service catalog entry describes a compute service. To use &PRODNAME;,
                                you must have access to a compute service.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.service-monitor">
                            <para>This service catalog entry describes a monitoring service. To use &PRODNAME;,
                                you must have access to a monitoring service.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.service-autoscale">
                            <para>This service catalog entry describes &PRODNAME;.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.tenant">
                            <para>Some services recognize the specification of a tenant. If a service does
                                recognize tenants, the format of the tenant specification is defined
                                only by the service. For details about whether and how to specify a tenant,
                                check the documentation for the service that you are using.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.url">
                            <para>An endpoint can be assigned public and internal URLs. A public URL is accessible
                                from anywhere. Access to a public URL usually incurs traffic charges.
                                Internal URLs are accessible only to services within the same region.
                                Access to an internal URL is free of charge.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.region">
                            <para>A service can expose endpoints in different regions. Regional endpoints allow
                                users to provision resources in a manner that provides high availability.</para>
                            <para>Some services are not region specific. These services supply a single, non-regional
                                endpoint and do not provide access to internal URLs.</para>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.servicename">
                            <para>The service name attribute identifies each unique service in the catalog.
                                After a service is created, its name does not change. However, new services
                                of the same service type can be added to the catalog with new names.</para>
                            <important>
                                <para>If you are programmatically parsing an authentication response, use service
                                    type rather than service name to determine whether a user has access
                                    to a particular kind of service. Service type is stable across all
                                    releases. New service types might be developed, but existing service
                                    types are not renamed. It is possible to subscribe to multiple services
                                    of the same type. Whatever those services are named, you can always
                                    recognize them by parsing for service type in the authentication
                                    response's service catalog.</para>
                            </important>
                            <para></para>
                        </callout>
                        <callout arearefs="response.json.servicetype">
                            <para>The service type attribute identifies services that perform similar functions,
                                regardless of service names. In this example, the service named cloudFiles
                                is identified as
                                <code>type="store"</code>, indicating that it is a storage service even though
                                the word "storage" does not appear in its name.</para>
                            <important>
                                <para>Use service type as the primary value for locating a service. If multiple
                                    endpoints of the same service type exist in the same region, use
                                    service name to locate the appropriate service.</para>
                            </important>
                            <para></para>
                        </callout>
                    </calloutlist>
                </section>
            </section>
            <section xml:id="serviceEndpoints">
                <title>Service access endpoints</title>
                <para>&PRODNAME; is a regionalized service. The user of the service is therefore responsible
                    for appropriate replication, caching, and overall maintenance of &PRODNAME; data
                    across regional boundaries to other &PROD; servers.</para>
                <para>The following table lists the service access
                endpoints for &PROD;  though we recommend checking the
                endpoints returned in the authentication response for
                the most up-to-date information. </para>
                <?rax-fo keep-with-next?>
                    <para>
                        <table rules="all">
                            <caption>Regionalized Service Endpoints</caption>
                            <col width="11%" />
                            <col width="11%" />
                            <col width="16%" />
                            <col width="16%" />
                            <col width="16%" />
                            <col width="16%" />
                            <col width="16%" />
                            <thead>
                                <tr align="center">
                                    <td colspan="2">Region</td>
                                    <td colspan="5">Endpoint</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr align="left">
                                    <td colspan="2">Chicago (ORD)</td>
                                    <td colspan="5">
                                        <code>https://ord.autoscale.api.rackspacecloud.com/v1.0/</code>
                                        <parameter>1234</parameter>/
                                    </td>
                                </tr>
                                <tr align="left">
                                    <td colspan="2">Dallas/Ft. Worth (DFW)</td>
                                    <td colspan="5">
                                        <code>https://dfw.autoscale.api.rackspacecloud.com/v1.0/</code>
                                        <parameter>1234</parameter>/
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">Dulles (IAD)</td>
                                    <td colspan="5">
                                        <code>https://iad.autoscale.api.rackspacecloud.com/v1.0/</code>
                                        <parameter>1234</parameter>/
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2">Hong Kong (HKG)</td>
                                    <td colspan="5">
                                        <code>https://hkg.autoscale.api.rackspacecloud.com/v1.0/</code>
                                        <parameter>1234</parameter>/
                                    </td>
                                </tr>
                                <tr align="left">
                                    <td colspan="2">London (LON)</td>
                                    <td colspan="5">
                                        <code>https://lon.autoscale.api.rackspacecloud.com/v1.0/</code>
                                        <parameter>1234</parameter>/</td>
                                </tr>
                                <tr align="left">
                                    <td colspan="2">Sydney (SYD)</td>
                                    <td colspan="5">
                                        <code>https://syd.autoscale.api.rackspacecloud.com/v1.0/</code>
                                        <parameter>1234</parameter>/</td>
                                </tr>
                            </tbody>
                        </table>
                    </para>
                    <para>Replace the Tenant ID,
                        <parameter>1234</parameter>, with your actual Tenant ID.</para>
                    <para>You will find your tenant Id after the final '/' in the
                        <code>publicURL</code>field returned by the authentication response. For example, in
                        <olink
                        targetdoc="autoscale-devguide" targetptr="auth-response-example-json">Example 2, “Authentication Response for US Endpoint: JSON”</olink>the
                            <code>publicURL</code>field for
                            <code>autoscale</code>
                            ("https://ord.autoscale.api.rackspacecloud.com/v1.0/
                            <emphasis role="bold">1100111</emphasis>") shows that the tenant Id is 1100111.</para>
            </section>
            <section xml:id="contractVersion">
                <title>Contract versions</title>
                <para>The &PROD; version defines the contract and build information for the API.</para>
                <para>The contract version denotes the data model and behavior that the API supports. The requested
                    contract version is included in all request URLs. Different contract versions of
                    the API might be available at any given time and are not guaranteed to be compatible
                    with one another.</para>
                <example>
                    <title>Sample request URL for contract version 1.0</title>
                    <programlisting>https://ord.autoscale.api.rackspacecloud.com/
                        <emphasis role="strong">v1.0</emphasis>/1234</programlisting>
                </example>
                <note>
                    <para>This document pertains to contract version 1.0.</para>
                </note>
            </section>
            <section xml:id="Request_Response_Types-d1e903">
                <title>Request and response types</title>
                <para>The &PRODNAME; API supports JSON data serialization formats. You specify the request
                    format by using the
                    <code>Content-Type</code>header. The request format is
                    <emphasis role="italic">required</emphasis>for calls that have a request body. You can specify the response
                    format in requests either by using the
                    <code>Accept</code>header or by adding a
                    <code>.json</code>extension to the request URI. JSON is also used for the response format.</para>
                <table rules="all">
                    <caption>Response Format</caption>
                    <?dbfo keep-together="always" ?>
                        <thead>
                            <tr align="center">
                                <td>Format</td>
                                <td>Accept Header</td>
                                <td>Query Extension</td>
                                <td>Default</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>JSON</td>
                                <td>application/json</td>
                                <td>.json</td>
                                <td>Yes</td>
                            </tr>
                            <tr security="writeronly">
                                <td>XML</td>
                                <td>application/xml</td>
                                <td>.xml</td>
                                <td>No</td>
                            </tr>
                        </tbody>
                </table>
            </section>
            <?hard-pagebreak?>
                <section xml:id="Limits-d1e1208">
                    <title>Limits</title>
                    <para>All accounts, by default, have a preconfigured set of thresholds (or limits) to manage
                        capacity and prevent abuse of the system. The system recognizes
                        <firstterm>rate limits
                        </firstterm>and
                        <firstterm>absolute limits
                        </firstterm>. Rate limits are thresholds that are reset after a certain amount
                        of time passes. Absolute limits are fixed.</para>
                    <section xml:id="Rate_Limits-d1e1222">
                        <!--
rate limits are managed by Repose rate limiting filter,
config at https://github.com/rackerlabs/autoscaling-chef/blob/master/site-cookbooks/repose/attributes/default.rb
-->
                        <title>Rate limits</title>
                        <para>Rate limits are specified in terms of both a human-readable wildcard URI and
                            a machine-processable regular expression. The regular expression boundary
                            matcher '^' takes effect after the root URI path.</para>
                        <para>For example, the regular expression
                            <code>^/v1.0/execute</code>would match the bolded portion of the following URI:
                            https://ord.autoscale.api.rackspacecloud.com
                            <emphasis role="bold">/v1.0/execute</emphasis>.</para>
                        <para>For any user, all &PROD; operations are limited to 1,000 calls per minute.</para>
                        <para>In addition, the following table specifies the default rate limits for specific
                            &PROD; API operations:</para>
                        <table rules="all" width="556">
                            <caption>Default Rate Limits</caption>
                            <thead>
                                <tr align="center">
                                    <td colspan="1">Method</td>
                                    <td colspan="2">URI</td>
                                    <td colspan="2">RegEx</td>
                                    <td colspan="1">Default</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="1">&GET; &PUT; &POST; &DELETE;</td>
                                    <td colspan="2">
                                        <code>/v1.0/execute/*</code>
                                    </td>
                                    <td colspan="2">
                                        <code>/v1\\.0/execute/(.*)</code>
                                    </td>
                                    <td colspan="1">10 per second</td>
                                </tr>
                                <tr>
                                    <td colspan="1">&GET; &PUT; &POST; &DELETE;</td>
                                    <td colspan="2">
                                        <code>/v1.0/tenantId/*</code>
                                    </td>
                                    <td colspan="2">
                                        <code>/v1\\.0/([0-9]+)/.+</code>
                                    </td>
                                    <td colspan="1">1000 per minute</td>
                                </tr>
                            </tbody>
                        </table>
                        <para>Rate limits are applied in order relative to the verb, going from least to most
                            specific. For example, although the general threshold for operations to
                            <code>/v1/0/*</code>is 1,000 per minute, one cannot &POST; to
                            <code>/v1.0/execute*</code>more than 1 time per second, which is 60 times per minute.</para>
                        <para>If you exceed the thresholds established for your account, a
                            <errorcode>413</errorcode>(Rate Control) HTTP response is returned with a
                            <code>Retry-After</code>header to notify the client when it can attempt to try
                            again.</para>
                    </section>
                    <section xml:id="Absolute_Limits-d1e1397">
                        <title>Absolute limits</title>
                        <table rules="all">
                            <caption>Absolute Limits</caption>
                            <thead>
                                <tr>
                                    <td colspan="1">Name</td>
                                    <td colspan="3">Description</td>
                                    <td colspan="1">Limit</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="1">Groups</td>
                                    <td colspan="3">Maximum number of groups allowed for your account
                                    </td>
                                    <td colspan="1">1000</td>
                                </tr>
                                <tr>
                                    <td colspan="1">Policies</td>
                                    <td colspan="3">Maximum volume of Policies per Group</td>
                                    <td colspan="1">100</td>
                                </tr>
                                <tr>
                                    <td colspan="1">Webhooks</td>
                                    <td colspan="3">Maximum volume of Webhooks per Policy</td>
                                    <td colspan="1">25</td>
                                </tr>
                            </tbody>
                        </table>
                    </section>
                </section>
                <section xml:id="datetimeformat">
                    <title>Date and time format</title>
                    <para>The &PROD; service uses a specific date format for the display and consumption of
                        date and time values. While the standard allows specification of time zones,
                        &PROD; does not use time zones. All times are expressed as UTC time zone.
                    </para>
                    <para>The following tables show how the date and time format works. The first table identifies
                        the date and time. The second table shows how a sample time appears when formatted
                        for use by &PROD;.</para>
                    <table rules="all" width="566">
                        <caption>Explanation of Date and Time Format Codes</caption>
                        <col width="14%" />
                        <col width="86%" />
                        <thead>
                            <tr>
                                <td>Code</td>
                                <td>Description</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>yyyy</td>
                                <td>Four-digit year</td>
                            </tr>
                            <tr>
                                <td>MM</td>
                                <td>Two-digit month</td>
                            </tr>
                            <tr>
                                <td>dd</td>
                                <td>Two-digit day of month</td>
                            </tr>
                            <tr>
                                <td>T</td>
                                <td>Separator between date and time</td>
                            </tr>
                            <tr>
                                <td>HH</td>
                                <td>Two-digit hour of day (00-23)</td>
                            </tr>
                            <tr>
                                <td>mm</td>
                                <td>Two-digit minutes of hour (00-59)</td>
                            </tr>
                            <tr>
                                <td>ss</td>
                                <td>Two-digit seconds of the minute (00-59)</td>
                            </tr>

                            <tr>
                                <td>Z</td>
                                <td>RFC 822 time zone</td>
                            </tr>
                        </tbody>
                    </table>
                    <table rules="all">
                        <caption>Example of Formatted Time</caption>
                        <thead>
                            <tr>
                                <td>Format</td>
                                <td>Formatted Time</td>
                                <td>Unformatted Time</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <code>yyyy-MM-dd'T'HH:mm:ss.SSS</code>
                                </td>
                                <td>
                                    <code>2013-05-19T08:07:08Z</code>
                                </td>
                                <td>May 19th, 2013 at 8:07:08 AM, GMT</td>
                            </tr>
                        </tbody>
                    </table>
                    <para>
                        <note>
                            <para>In Auto Scale, the time specified always refers to the "UTC" time zone.</para>
                        </note>
                    </para>
                </section>
                <section xml:id="pagination">
                    <title>Pagination</title>
                    <para>The Auto Scale API supports pagination of items that are returned in API call responses.
                        Pagination enables users to view all responses even if the number of items returned
                        in the response body is longer than what fits on one page.</para>
                    <para>The pagination limit for the Auto Scale API is 100. This means you can view 100 items
                        at a time.</para>
                    <para>For example, if you want to get a list of all the scaling groups, and there are more
                        than 100 groups, you see the first 100 groups on one page and then a link at
                        the bottom of the page that takes you to the next page, which contains the next
                        100 items.</para>
                    <para>A pagination limit that is set beyond 100 is defaulted to 100. And a limit that is
                        set to smaller than 1 is defaulted to 1.</para>
                    <para>The Auto Scale API paginates the following items:</para>
                    <itemizedlist>
                        <listitem>
                            <para>scaling groups</para>
                        </listitem>
                        <listitem>
                            <para>scaling policies</para>
                        </listitem>
                        <listitem>
                            <para>webhooks</para>
                        </listitem>
                    </itemizedlist>
                    <para>You can specify further pages with the
                        <parameter>?page</parameter>parameter in the Link header in the URI request, and set the
                        number of items to be displayed per page in the
                        <parameter>per_page</parameter>parameter as shown in the following example:</para>
                    <para>
                        <programlisting>Link: &lt;https://api.github.com/user/repos?page=3&amp;per_page=100&gt;; rel="next",
                            &lt;https://api.github.com/user/repos?page=50&amp;per_page=100&gt;; rel="last"</programlisting>
                    </para>
                    <para>To navigate the collection of items that are returned in the request body, you can
                        set the following parameters in the URI:
                    </para>
                    <para>
                        <table rules="all">
                            <caption>limit and marker Pagination Parameters</caption>
                            <col width="20%" />
                            <col width="80%" />
                            <thead>
                                <tr>
                                    <td>Parameter</td>
                                    <td>Description</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <parameter>limit</parameter>
                                    </td>
                                    <td>Specifies the number of items that can be returned on one page. If
                                        the client requests a
                                        <emphasis role="italic">limit</emphasis>beyond the 100 items supported by Auto Scale,
                                        an overLimit (413) response code will be returned.</td>
                                </tr>
                                <tr>
                                    <td>
                                        <parameter>marker</parameter>
                                    </td>
                                    <td>Specifies the Id of the last item in the previous list. Items are
                                        sorted by create time in descending order. When a create time
                                        is not available they are sorted by Id. If the Id specified for
                                        this parameter is invalid, a 400 response code (badRequest) will
                                        be returned.
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </para>
                    <para>
                        <note>
                            <para>The
                                <parameter>limit</parameter>and
                                <parameter>marker</parameter>parameters are both optional.
                            </para>
                        </note>
                    </para>
                    <para>To specify the direction for the next page of results, you need to set the
                        <parameter>rel</parameter>parameter at the end of the request URI. The following values
                        can be set:
                    </para>
                    <table rules="all">
                        <caption>Values for Rel Parameter</caption>
                        <col width="20%" />
                        <col width="80%" />
                        <thead>
                            <tr>
                                <td>Value</td>
                                <td>Description</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>next</td>
                                <td>Shows the URL of the immediate next page of results.
                                </td>
                            </tr>
                            <tr>
                                <td>last</td>
                                <td>Shows the URL of the last page of results.</td>
                            </tr>
                            <tr>
                                <td>first</td>
                                <td>Shows the URL of the first page of results.</td>
                            </tr>
                            <tr>
                                <td>prev</td>
                                <td>Shows the URL of the immediate previous page of results.
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <section xml:id="Paginating_Group_Lists">
                        <title>Paginating group lists</title>
                        <para>When submitting a request for a group manifest, you receive a list of all the
                            available scaling groups and associated policies. However, if there are too
                            many, the response body will only list 100, and provide a next link in the
                            <parameter>rel</parameter>parameter as shown in the following example:</para>
                        <example>
                            <title>Paginating group lists example</title>
                            <programlisting language="json">{ "groups": [ ... ], "group_links": [ { "href": "https://dfw.autoscale.api.rackspacecloud.com/v1.0/010101/groups/?limit=100&amp;marker=f82bb000-f451-40c8-9dc3-6919097d2f7e"
                                "rel": "next" } ] }

                            </programlisting>
                        </example>
                        <para>The
                            <parameter>limit</parameter>parameter in the example above is set to 100, which means
                            no more than 100 items can be displayed on one page. For Auto Scale, this
                            number must be between 1 and 100. So if you provide a query argument of more
                            than 100, it will default to 100, and if you set the limit to less than 1,
                            it will default to 1.</para>
                        <para>If you provide an invalid query argument for
                            <parameter>limit</parameter>, a 400 response code will be returned. The
                            <parameter>marker</parameter>parameter specifies the last seen group Id. When you click
                            on the link that is returned, all the groups displayed will have group Ids
                            that are greater than "f82bb000-f451-40c8-9dc3-6919097d2f7e".
                        </para>
                    </section>
                    <section xml:id="Paginating_Policy_Lists">
                        <title>Paginating policy lists</title>
                        <para>When you submit a request to obtain all the policies associated with a scaling
                            group, a list of policies will be returned. However, if there are too many
                            policies, the response body will only list 100, and provide a next link in
                            the
                            <parameter>rel</parameter>parameter as shown in the following example:</para>
                        <example>
                            <title>Paginating policy lists example</title>
                            <programlisting language="json">{ "policies": [ ... ], "policies_links": [ { "href": "http://dfw.autoscale.api.rackspacecloud.com/v1.0/010101/groups/b5210aa2-5c8f-4c17-9fb4-71a351e519cd/policies/?limit=100&amp;marker=f82bb000-f451-40c8-9dc3-6919097d2f7e",
                                "rel": "next" } ] }
                            </programlisting>
                        </example>
                        <para>The
                            <parameter>marker</parameter>parameter points to the last seen policy Id. When you click
                            on the link that is returned, all the policies displayed will have policy
                            Ids that are greater than "f82bb000-f451-40c8-9dc3-6919097d2f7e".
                        </para>
                    </section>
                    <section xml:id="Paginating_Webhook_lists">
                        <title>Paginating webhook lists</title>
                        <para>When you submit a request to obtain all the webhooks associated with a policy,
                            a list of webhooks will be returned. However, if there are too many webhooks,
                            the response body will only list 100, and provide a next link in the
                            <parameter>rel</parameter>parameter as shown in the following example:</para>
                        <example>
                            <title>Paginating webhook lists example</title>
                            <programlisting language="json">{ "webhooks": [ ... ], "webhooks_links": [ { "href": "http://dfw.autoscale.api.rackspacecloud.com/v1.0/010101/groups/b5210aa2-5c8f-4c17-9fb4-71a351e519cd/policies/5783f588-eba6-4ca2-a9c5-ce04f2c32992/webhooks/?limit=100&amp;marker=f82bb000-f451-40c8-9dc3-6919097d2f7e",
                                "rel": "next" } ] }
                            </programlisting>
                        </example>
                        <para>The
                            <parameter>marker</parameter>parameter points to the last seen webhook Id. When you
                            click on the link that is provided in the response body, all the webhooks
                            displayed will have webhook Ids that are greater than "f82bb000-f451-40c8-9dc3-6919097d2f7e".
                        </para>
                    </section>
                </section>
                <section xml:id="server-flavors">
                    <title>Server flavors</title>
                    <para>When configuring a Cloud Server image through the Control Panel or the API, users
                        can chose a specific server flavor. A flavor is an available hardware configuration
                        for a server. Each flavor has a unique combination of disk space and memory capacity.
                        The server flavor that is specified in the Control Panel maps to a specific flavor
                        id in the Rackspace API. The following table outlines the mapping between flavor
                        Id and the available flavors in the Control Panel.</para>
                    <table rules="all">
                        <caption>Rackspace Cloud Server Flavors</caption>
                        <col width="30%" />
                        <col width="30%" />
                        <col width="20%" />
                        <col width="10%" />
                        <col width="10%" />

                        <thead>
                            <tr>
                                <td align="center">Flavor ID</td>
                                <td align="center">Name</td>
                                <td align="center">Memory (MB)</td>
                                <td align="center">Disk</td>
                                <td align="center">VCPUs</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>2</td>
                                <td>512 MB Standard Instance</td>
                                <td>512</td>
                                <td>20</td>
                                <td>1</td>
                            </tr>
                            <tr>
                                <td>3</td>
                                <td>1 GB Standard Instance</td>
                                <td>1024</td>
                                <td>40</td>
                                <td>1</td>
                            </tr>
                            <tr>
                                <td>4</td>
                                <td>2 GB Standard Instance</td>
                                <td>2048</td>
                                <td>80</td>
                                <td>2</td>
                            </tr>
                            <tr>
                                <td>5</td>
                                <td>4 GB Standard Instance</td>
                                <td>4096</td>
                                <td>160</td>
                                <td>2</td>
                            </tr>
                            <tr>
                                <td>6</td>
                                <td>8 GB Standard Instance</td>
                                <td>8192</td>
                                <td>320</td>
                                <td>4</td>
                            </tr>
                            <tr>
                                <td>7</td>
                                <td>15 GB Standard Instance</td>
                                <td>15360</td>
                                <td>620</td>
                                <td>6</td>
                            </tr>
                            <tr>
                                <td>8</td>
                                <td>30 GB Standard Instance</td>
                                <td>30720</td>
                                <td>1200</td>
                                <td>8</td>
                            </tr>
                            <tr>
                                <td>performance1-1</td>
                                <td>1 GB Performance</td>
                                <td>1024</td>
                                <td>20</td>
                                <td>1</td>
                            </tr>
                            <tr>
                                <td>performance1-2</td>
                                <td>2 GB Performance</td>
                                <td>2048</td>
                                <td>40</td>
                                <td>2</td>
                            </tr>
                            <tr>
                                <td>performance1-4</td>
                                <td>4 GB Performance</td>
                                <td>4096</td>
                                <td>40</td>
                                <td>4</td>
                            </tr>
                            <tr>
                                <td>performance1-8</td>
                                <td>8 GB Performance</td>
                                <td>8192</td>
                                <td>40</td>
                                <td>8</td>
                            </tr>
                            <tr>
                                <td>performance2-120</td>
                                <td>120 GB Performance</td>
                                <td>122880</td>
                                <td>40</td>
                                <td>32</td>
                            </tr>
                            <tr>
                                <td>performance2-15</td>
                                <td>15 GB Performance</td>
                                <td>15360</td>
                                <td>40</td>
                                <td>4</td>
                            </tr>
                            <tr>
                                <td>performance2-30</td>
                                <td>30 GB Performance</td>
                                <td>30720</td>
                                <td>40</td>
                                <td>8</td>
                            </tr>
                            <tr>
                                <td>performance2-60</td>
                                <td>60 GB Performance</td>
                                <td>61440</td>
                                <td>40</td>
                                <td>16</td>
                            </tr>
                            <tr>
                                <td>performance2-90</td>
                                <td>90 GB Performance</td>
                                <td>92160</td>
                                <td>40</td>
                                <td>24</td>
                            </tr>
                        </tbody>
                    </table>
                    <para>
                        <note>
                            <para>Auto Scale only supports Next Generation servers. No First Generation servers
                                are supported.</para>
                        </note>
                    </para>
                </section>
                <section xml:id="audit-log">
                    <title>Audit logs</title>
                    <para>Because of the deferred nature of Auto Scale, most errors occur outside of the user's
                        session. Errors are logged to a user's cloud feed as an audit log. The audit
                        log contains all the events that have occurred within a user's scaling group.
                    </para>
                </section>
                <section xml:id="faults-dle101">
                    <title>Faults</title>
                    <para>If any &PRODNAME; request results in an error, the service returns an appropriate
                        4
                        <emphasis role="italic">xx</emphasis>
                        or 5
                        <emphasis role="italic">xx</emphasis>HTTP status code, and the following information in the body:</para>
                    <itemizedlist>
                        <listitem>
                            <para>Title</para>
                        </listitem>
                        <listitem>
                            <para>Description</para>
                        </listitem>
                        <listitem>
                            <para>Internal code</para>
                        </listitem>
                        <listitem>
                            <para>Link to more information</para>
                        </listitem>
                    </itemizedlist>
                    <para>For &PROD; users, common faults are caused by invalid configurations. For example,
                        trying to boot a server from an image that does not exist causes a fault, as
                        does trying to attach a load balancer to a scaling group that does not exist.</para>
                    <para>An example of an error message follows.</para>
                    <!-- improve this example to show something that an Auto scale user would really see -->
                    <example>
                        <title>Error message: bad request</title>
                        <programlisting>HTTP/1.1 400 Bad Request Content-Type: application/json { "title": "Unsupported
                            limit", "description": "The given limit cannot be negative, and cannot be
                            greater than 50.", "code": 1092, "link": { "rel": "help", "href": "http://docs.example.com/messages#limit",
                            "text": "API documentation for the limit parameter" } }
                        </programlisting>
                    </example>
                    <para>Error information for each API operation is included with the description of that
                        operation in
                        <xref linkend="API_Operations" />.</para>
                </section>
        </chapter>
        <chapter xml:id="Autoscale_Components">
            <title>Key configurations</title>
            <para>In this chapter you will learn about the following key elements of an Auto Scale deployment:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <link linkend="Group_Configuration">Scaling groups</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Launch_Configuration">Launch configurations
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Scaling_Policies">Scaling group policies</link>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <note>
                <para>For details on API parameters, see <link
                    linkend="API_Operations">Chapter 6, API
                    Operations</link>. </para>
            </note>
            <section xml:id="Group_Configuration">
                <title>Scaling groups</title>
                <para>The scaling group configuration specifies the basic elements of the Auto Scale configuration.
                    It manages how many servers can participate in the scaling group. It also specifies
                    information related to load balancers.
                </para>
                <para>The following table specifies the parameters for the
                    <parameter>group</parameter> configuration
                    parameter:</para>
                <table rules="all">
                    <caption>Group Configuration Parameters</caption>
                    <col width="20%" />
                    <col width="60%" />
                    <thead>
                        <tr>
                            <td>Parameter</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <parameter>name</parameter>
                            </td>
                            <td>Specifies the name of the scaling
                            group.</td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>maxEntities</parameter>
                            </td>
                            <td>Specifies the maximum number of
                            entities that are allowed in this group.
                            You cannot scale up above this value.
                            Decreasing this value can cause an
                            immediate reduction of the scaling group. </td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>minEntities</parameter>
                            </td>
                            <td>Specifies the minimum number of
                            entities that are allowed in this group.
                            You cannot scale down below this value.
                            Increasing this value can cause an
                            immediate addition to the scaling group. </td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>cooldown</parameter>
                            </td>
                            <td>
                                <para>Describes, in seconds, how long
                                the group must wait after a scaling
                                policy is triggered before another
                                request for scaling is accepted.
                                Applies mainly to event-based
                                policies.</para>
                            </td>
                        </tr>
                    <tr>
                        <td>
                            <parameter>metadata</parameter>
                        </td>
                        <td>Optional. The maximum size of the metadata
                            key and value is 255 bytes each. For more
                            information, see the <link
                                xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/Server_Metadata-d1e2529.html"
                                >Server</link></td>
                    </tr>
                    </tbody>
                </table>
                <para>The number of resources entities that are specified in
                    <parameter>minEntities</parameter>and
                    <parameter>maxEntities</parameter>overrides the amount of resources that can be specified in
                    a policy. See also
                    <link linkend="Min_and_Max_Policies">Using the min and max values with policies
                    </link>.</para>
                <para>You can specify custom metadata for your group configuration using the optional
                    <parameter>metadata</parameter>parameter.</para>
                <para>
                    <note>
                        <para>Group metadata is stored within the Auto Scale API and can be queried. You can
                            use the
                            <parameter>metadata</parameter>parameter for customer automation, but it does not change
                            any functionality in Auto Scale.</para>
                    </note>
                </para>
                <para>The following example shows a possible scaling group configuration:
                </para>
                <example>
                    <title>Scaling group configuration example</title>
                    <programlisting language="json">
                        <xi:include href="./samples/GroupConfiguration.json" parse="text" />
                    </programlisting>
                </example>
            </section>
            <section xml:id="Launch_Configuration">
                <title>Launch configurations</title>
                <para>The launch configuration manages the process of creating new servers. It specifies what
                    type of server image will be started on launch, what flavor the new server is, and
                    which load balancer the new server connects to.</para>
                <para>The
                    <parameter>launchConfiguration</parameter>
                    parameter specifies the following items:</para>
                <para>
                    <table>
                        <caption>launchConfiguration</caption>
                        <col width="20%" />
                        <col width="60%" />
                        <thead>
                            <tr>
                                <td>Parameter</td>
                                <td>Description</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <parameter>type</parameter>
                                </td>
                                <td>Set to "launch_server".</td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>args</parameter>
                                </td>
                                <td>Specifies the item to be
                                configured. Must be "server" and also,
                                in most cases, "loadbalancer." Most
                                launch configurations have both a
                                server and a loadbalancer
                                configured.</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <para>The following table shows the values that can be configured for the
                    <parameter>args</parameter>
                    parameter:</para>
                <para>
                    <table rules="all">
                        <?sbr?>
                            <caption>args Parameters</caption>
                            <col width="20%" />
                            <col width="60%" />
                            <thead>
                                <tr>
                                    <td>Parameter</td>
                                    <td>Description</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <parameter>server</parameter>
                                    </td>
                                    <td>Specifies configuration information for the Cloud server image that
                                        will be created during the scaling process
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <parameter>loadbalancers</parameter>
                                    </td>
                                    <td>Specifies the configuration information for the load balancer(s)
                                        used in the cloud server deployment
                                    </td>
                                </tr>
                            </tbody>
                    </table>
                </para>
                <para>The
                    <parameter>server</parameter>parameter group specifies details about the server as described
                    in the following table:</para>
                <para>
                    <table rules="all">
                        <caption>server Parameters</caption>
                        <col width="20%" />
                        <col width="60%" />
                        <thead>
                            <tr>
                                <td>Parameter</td>
                                <td>Description</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <parameter>name</parameter>
                                </td>
                                <td>Specifies a prefix to the name for
                                created servers. The name of new
                                servers will be automatically
                                generated using the following formula:
                                [serverName]-AS[uniqueHash], and will
                                look similar to the following:
                                [serverName]-AS12fabe. The name of new
                                servers may be truncated to fit within
                                the limit of 255 characters. </td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>flavorRef</parameter>
                                </td>
                                <td>Specifies the flavor Id for the
                                server. A flavor is a resource
                                configuration for a server. For more
                                information on available flavors, see
                                   <olink
                                   targetdoc="autoscale-devguide"
                                   targetptr="server-flavors">“Server
                                   Flavors” </olink>.  Example:
                                performance1-4.</td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>imageRef</parameter>
                                </td>
                                <td>Specifies the Id of the Cloud
                                Server image to start.  Example:
                                0d589460-f177-4b0f-81c1-8ab8903ac7d8.</td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>OS-DCF:diskConfig</parameter>
                                </td>
                                <td>Specifies the disk configuration
                                value, specifically, how the disk on
                                new servers is partitioned. . Valid
                                values are "AUTO" or "MANUAL." For
                                more information, see the <link
                                   xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/ch_extensions.html#diskconfig_attribute"
                                   >Disk Configuration Extension
                                </link>documentation for Rackspace
                                Cloud Servers.</td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>metadata</parameter>
                                </td>
                                <td>Optional. The maximum size of the
                                metadata key and value is 255 bytes
                                each. For more information, see the
                                   <link
                                   xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/Server_Metadata-d1e2529.html"
                                   >Server Metadata</link>
                                documentation for Rackspace Cloud
                                Servers. </td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>networks</parameter>
                                </td>
                                <td>Specifies the networks to which you want to attach the server. This attribute
                                    enables you to attach to an isolated network for your tenant ID,
                                    the public Internet, and the private ServiceNet.
                                    <?sbr?>If you do not specify any networks, your server is attached to the
                                        public Internet and private ServiceNet. The UUID for the private
                                        ServiceNet is 11111111-1111-1111-1111-111111111111. The UUID
                                        for the public Internet is 00000000-0000-0000-0000-000000000000.</td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>personality</parameter>
                                </td>
                                <td>Specifies the file path or the content that you want to inject into a
                                    server image. For more information, see the
                                    <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/Server_Personality-d1e2543.html">Server Personality</link>
                                    documentation for Rackspace Cloud Servers.
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <para>This
                    <parameter>loadbalancers</parameter>parameter group specifies details about the load balancer
                    as described in the following table:</para>
                <table rules="all">
                    <caption>loadBalancers Parameters</caption>
                    <col width="20%" />
                    <col width="60%" />
                    <thead>
                        <tr>
                            <td>Parameter Name</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <parameter>loadBalancerId</parameter>
                            </td>
                            <td>Specifies the ID of the load balancer
                            that is automatically generated when the
                            load balancer is created.</td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>port</parameter>
                            </td>
                            <td> The port on which new servers will
                            receive traffic from the load balancer,
                            often port 80. </td>
                        </tr>
                    </tbody>
                </table>
                <note>
                    <para>You can obtain details about your load balancer from the Control Panel or by using
                        the Load Balancer API. For more information, see
                        <link xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-getting-started/content/List_LB_Details.html">List Load Balancer Details</link>.</para>
                </note>
                <para>The following example shows a launch configuration of type "launch_server" for a cloud
                    server and a load balancer:
                </para>
                <example>
                    <title>Launch configuration example</title>
                    <programlisting language="json">
                        <xi:include href="./samples/LaunchConfiguration.json" parse="text" />
                    </programlisting>
                </example>
                <tip>
                    <para>To learn more about configuring cloud servers through an API, read the following:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/overview.html">Next Generation Cloud Servers Getting Started</link>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/ch_api_operations.html">Next Generation Cloud Servers Developer Guide</link>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>To learn more about configuring Cloud Load Balancers through an API, read the following:
                        <itemizedlist>
                            <listitem>
                                <para>
                                    <link xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-getting-started/content/DB_Overview.html">Rackspace Cloud Load Balancers Getting Started</link>
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    <link xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-devguide/content/API_Operations-d1e1354.html">Rackspace Cloud Load Balancers Developer Guide</link>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                </tip>
            </section>
            <section xml:id="Scaling_Policies">
                <title>Scaling group policies
                    <?sbr?>
                </title>
                <para>Scaling group policies specify how to modify the scaling group and its behavior. You
                    can specify multiple policies to manage a scaling group.</para>
                <para>To define a scaling policy, you set the following parameters for the
                    <parameter>scalingPolicies</parameter>
                    group:</para>
                <table rules="all">
                    <caption>scalingPolicies Parameters</caption>
                    <col width="20%" />
                    <col width="60%" />
                    <thead>
                        <tr>
                            <td>Parameter</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <parameter>name</parameter>
                            </td>
                            <td>Specifies the name of the scaling policy
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>changePercent</parameter>
                            </td>
                            <td>Specifies the change value, in
                            incremental stages or per cent.  Use to
                            change the percentage of servers relative
                            to the current number of servers. If a
                            positive number is used, servers are
                            added; if a negative number is used,
                            servers are removed. The absolute change
                            in the number of servers is always rounded
                            up. For example, if -X% of the current
                            number of servers translates to -0.5 or
                            -0.25 or -0.75 servers, the actual number
                            of servers that will be shut down is 1. </td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>cooldown</parameter>
                            </td>
                            <td>Specifies the policy cooldown time, in
                            seconds.  Prohibits the execution of this
                            specific policy until the configured
                            cooldown time period has passed. Helps
                            prevent an event triggering a policy and
                            can help to ensure that servers can be
                            added quickly (long cooldown) and removed
                            gradually (short cooldown). </td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>type</parameter>
                            </td>
                            <td>Specifies how the policy will be executed (by
                                <parameter>webhook</parameter>or based on a
                                <parameter>schedule</parameter>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <itemizedlist>
                    <listitem>
                        <para>
                            <link linkend="Webhook_triggered_policy">Webhook-based policies</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Schedule_based_Policy">Schedule-based policies</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Scale_by_percentage">Scaling by percentage</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Min_and_Max_Policies">Using the min and max values with policies
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Deleting_resources">Deleting resources
                            </link>
                        </para>
                    </listitem>
                </itemizedlist>
                <section xml:id="Webhook_triggered_policy">
                    <title>Webhook-based policies</title>
                    <para>You can define a scaling policy that is invoked by a webhook when a predefined event
                        occurs.</para>
                    <para>
                        <note>
                            <para>The
                                <parameter>change</parameter>,
                                <parameter>changePercent</parameter>, and
                                <parameter>desiredCapacity</parameter>
                                parameters are mutually exclusive. You can only set one of them per policy.</para>
                        </note>
                    </para>
                    <para>To configure a webhook-based policy, you set the
                        <parameter>type</parameter>parameter to "webhook" and then provide the following information:</para>
                    <para>
                        <table rules="all">
                            <caption>Parameters for Webhook-triggered Policies
                            </caption>
                            <col width="20%" />
                            <col width="60%" />
                            <thead>
                                <tr>
                                    <td>Parameter</td>
                                    <td>Description</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <parameter>change</parameter>
                                    </td>
                                    <td>Specifies the number of
                                   entities to add or remove, for
                                   example "1" implies that 1 server
                                   needs to be added. Use to change
                                   the number of servers to a specific
                                   number. If a positive number is
                                   used, servers are added; if a
                                   negative number is used, servers
                                   are removed. </td>
                                </tr>
                                <tr>
                                    <td>
                                        <parameter>changePercent</parameter>
                                    </td>
                                    <td>Specifies the change value in
                                   per cent. Use to change the
                                   percentage of servers relative to
                                   the current number of servers. If a
                                   positive number is used, servers
                                   are added; if a negative number is
                                   used, servers are removed. The
                                   absolute change in the number of
                                   servers is always rounded up. For
                                   example, if -X% of the current
                                   number of servers translates to
                                   -0.5 or -0.25 or -0.75 servers, the
                                   actual number of servers that
                                   will be shut down is 1. </td>
                                </tr>
                                <tr>
                                    <td>
                                        <parameter>desiredCapacity</parameter>
                                    </td>
                                    <td>Specifies the final capacity
                                   that is desired by the scale up
                                   event. Note that this value is
                                   always rounded up. Use to specify a
                                   number of servers for the policy to
                                   implement—by either adding or
                                   removing servers as needed. </td>
                                </tr>
                            </tbody>
                        </table>The webhook object takes no
                        <parameter>args</parameter>parameter.</para>
                    <para>
                        <note>
                            <para>The
                                <parameter>change</parameter>,
                                <parameter>changePercent</parameter>, and
                                <parameter>desiredCapacity</parameter>parameters are mutually exclusive. You can
                                only set one of them per policy.
                            </para>
                        </note>
                    </para>
                </section>
                <section xml:id="Schedule_based_Policy">
                    <title>Schedule-based policies</title>
                    <para>You can define a scaling policy that is invoked by a preset schedule.</para>
                    <para>
                        <note>
                            <para>The
                                <parameter>change</parameter>,
                                <parameter>changePercent</parameter>, and
                                <parameter>desiredCapacity</parameter>
                                parameters are mutually exclusive. You can only set one of them per policy.</para>
                        </note>
                    </para>
                    <para>To configure a schedule-based policy, set the
                        <parameter>type</parameter>parameter to "schedule" and then provide the following information:</para>
                    <para>
                        <table>
                            <caption>Parameters for Scheduled-based Policies
                            </caption>
                            <col width="205" />
                            <col width="60%" />
                            <thead>
                                <tr>
                                    <td>Parameter Name</td>
                                    <td>Description</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        <parameter>change</parameter>
                                    </td>
                                    <td>Specifies the number of
                                   entities to add or remove, for
                                   example "1" implies that 1 server
                                   needs to be added. Use to change
                                   the number of servers to a specific
                                   number. If a positive number is
                                   used, servers are added; if a
                                   negative number is used, servers
                                   are removed.</td>
                                </tr>
                                <tr>
                                    <td>
                                        <parameter>changePercent</parameter>
                                    </td>
                                    <td>Specifies the change value, in
                                   incremental stages or per cent. Use
                                   to change the percentage of servers
                                   relative to the current number of
                                   servers. If a positive number is
                                   used, servers are added; if a
                                   negative number is used, servers
                                   are removed. The absolute change in
                                   the number of servers is always
                                   rounded up. For example, if -X% of
                                   the current number of servers
                                   translates to -0.5 or -0.25 or
                                   -0.75 servers, the actual number of
                                   servers that will be shut down is
                                   1. </td>
                                </tr>
                                <tr>
                                    <td>
                                        <parameter>desiredCapacity</parameter>
                                    </td>
                                    <td>Specifies final capacity that
                                   is desired by the scale up event.
                                   Use to specify a number of servers
                                   for the policy to implement—by
                                   either adding or removing servers
                                   as needed. </td>
                                </tr>
                                <tr>
                                    <td>
                                        <parameter>args</parameter>
                                    </td>
                                    <td>Provide information related to the time when the policy is supposed
                                        to be invoked.</td>
                                </tr>
                            </tbody>
                        </table>
                    </para>
                    <para>For example to use Cron, a time-based job scheduler, you specify the time when the
                        policy is invoked in CRON format, as shown in the following example, which configures
                        the policy to be invoked at 6 AM every day:
                        <example>
                            <title>Schedule-based policy using cron</title>
                            <programlisting language="json">
                                <xi:include href="./samples/Cronstylescheduler.json" parse="text" />
                            </programlisting>
                        </example>
                    </para>
                    <para>To set the time at which the policy will be invoked directly, without Cron, use the
                        "at" argument and specify the time using the format that is shown in the following
                        example:
                        <example>
                            <title>Schedule-based policy specifying direct time</title>
                            <programlisting language="json">
                                <xi:include href="./samples/Atstylescheduler.json" parse="text" />
                            </programlisting>
                        </example>
                    </para>
                </section>
                <section xml:id="Scale_by_percentage">
                    <title>Scaling by percentage</title>
                    <para>You can define a policy that scales your server resources up and down by a predefined
                        percentage. For example, you can define a policy to increase your resources by
                        20% if a certain predefined event occurs.</para>
                    <para>The following diagram outlines how scaling by percentage works.</para>
                    <informalfigure>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/ScalebyPercentage.png" contentwidth="6in" />
                            </imageobject>
                        </mediaobject>
                    </informalfigure>
                </section>
                <section xml:id="Min_and_Max_Policies">
                    <title>Using the min and max values with policies
                    </title>
                    <para>When setting up your scaling groups, you configure the minimum and maximum number
                        of resources that are allowed. These values are specified in the
                        <parameter>minEntities</parameter>and
                        <parameter>maxEntities</parameter>parameters under group configuration, and are invoked whenever
                        you update your group configuration.</para>
                    <para>
                        <important>
                            <para>If the number of resources that is specified in a policy differs from the
                                amount that is specified under group configuration, the preconfigured
                                values take precedence.
                            </para>
                        </important>
                    </para>
                    <para>The following diagram illustrates how the min and max values work in a scaling scenario.</para>
                    <informalfigure>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/Minandmax.png" contentwidth="6in" />
                            </imageobject>
                        </mediaobject>
                    </informalfigure>
                </section>
                <section xml:id="Deleting_resources">
                    <title>Deleting resources
                        <?sbr?>
                    </title>
                    <para>You can set a policy to specify when you want some of your resources deleted, and
                        how many resources should be deleted.</para>
                    <para>When deleting servers, Auto Scale follows these rules:
                    </para>
                    <para>
                        <itemizedlist>
                            <listitem>
                                <para>If no new servers are in the process of being built, the oldest servers
                                    are deleted first.</para>
                            </listitem>
                            <listitem>
                                <para>If new servers are in the process of being built and in a "pending" state,
                                    these servers are deleted first.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </para>
                    <para>The following diagram illustrates how the deletion process works.</para>
                    <informalfigure>
                        <mediaobject>
                            <imageobject>
                                <imagedata fileref="images/DeletePolicy.png" contentwidth="6in" />
                            </imageobject>
                        </mediaobject>
                    </informalfigure>
                </section>
            </section>
        </chapter>
        <chapter xml:id="Working_with_Auto_Scale_API">
            <title>Working with the Auto Scale API</title>
            <para>In this chapter you will learn how to do the following:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <link linkend="Manage_Launch_Configuration">Create and manage scaling groups
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Create_Scaling_Policies">Create and manage scaling policies
                            </link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Create_and_Manage_Webhooks">Create and manage webhooks</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <link linkend="Execute_Scaling_Policy">Execute a scaling policy</link>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <note>
                <para>For details on API parameters, see <link
                    linkend="API_Operations">Chapter 6, API
                    Operations</link>. </para>
            </note>
            <section xml:id="Manage_Launch_Configuration">
                <title>Create and manage scaling groups</title>
                <para>You can use the Auto Scale API to view and update the launch configuration for your scaling
                    group:</para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <link linkend="Get_Configuration_for_Scaling_Group">Get the current configuration for your scaling group
                                </link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Edit_Configuration_for_Scaling_Group">Edit the current configuration for your scaling group
                                </link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Get_Launch_Configuration_for_Scaling_Group">Get the launch configuration for your scaling group
                                </link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Edit_Launch_Config">Edit the launch configuration for your scaling group</link>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <section xml:id="Get_Configuration_for_Scaling_Group">
                    <title>Get the current configuration for your scaling group
                    </title>
                    <para>To obtain the configuration for a scaling
                    group, which includes the minimum number of
                    entities, the maximum number of entities, global
                    cooldown, and other metadata, submit a
                        <command>GET</command>request with the
                        <parameter>tenantId</parameter> and
                        <parameter>groupId</parameter> parameters
                    specified in the request URL. Add the
                        <parameter>?webhook=true</parameter> parameter
                    to also get details about any webhooks associated
                    with the scaling group's policies.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>GET /{tenantId}/groups/{groupId}/config</programlisting>
                    </example>
                    <para>If the
                        <command>GET</command>request is successful, the data is returned in the body of the response
                        in JSON format as shown in the following example:</para>
                    <example>
                        <title>Response to successful GET configuration request</title>
                        <programlisting language="json">
                            <xi:include href="./samples/resGetLaunchConfig.json" parse="text" />
                        </programlisting>
                    </example>
                </section>
                <section xml:id="Edit_Configuration_for_Scaling_Group">
                    <title>Edit the current configuration for your scaling group
                    </title>
                    <para>To edit the configuration for a scaling group, which includes the minimum number
                        of entities, the maximum number of entities, global cooldown, and other metadata,
                        submit a
                        <command>PUT</command>request with the
                        <parameter>tenantId</parameter>and
                        <parameter>groupId</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>PUT /{tenantId}/groups/{groupId}/config</programlisting>
                        <programlisting language="json">
                            <xi:include href="./samples/reqPutGroupConfig.json" parse="text" />
                        </programlisting>
                    </example>
                    <para>If the
                        <command>PUT</command>request is successful, a 204 response code with an empty response
                        body will be returned</para>
                </section>
                <section xml:id="Get_Launch_Configuration_for_Scaling_Group">
                    <title>Get the launch configuration for your scaling group
                    </title>
                    <para>To obtain the launch configuration for a scaling group, which includes the details
                        of how to create a server, from what image, which load balancers to join it to,
                        what networks to add it to, and other metadata, submit a
                        <command>GET</command>request with the
                        <parameter>tenantId</parameter>and
                        <parameter>groupId</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>GET /{tenantId}/groups/{groupId}/launch</programlisting>
                    </example>
                    <para>If the
                        <command>GET</command>request is successful, the data will be returned in the body of
                        the response in JSON format as shown in the following example:</para>
                    <example>
                        <title>Response to a successful get launch configuration for a scaling group</title>
                        <programlisting
                        language="json">
                            <xi:include href="./samples/resGetLaunchConfig.json" parse="text" />
                            </programlisting>
                    </example>
                </section>
                <section xml:id="Edit_Launch_Config">
                    <title>Edit the launch configuration for your scaling group
                    </title>
                    <para>To edit the launch configuration for a scaling group, including how to create a server,
                        from what image, which load balancers to join it to, and what networks to add
                        it to, and other metadata, submit a
                        <command>PUT</command>
                        request with the
                        <parameter>tenantId</parameter>and
                        <parameter>groupId</parameter>parameters specified in the request URL. In the request body,
                        specify the details about the server type, server image, load balancers, network,
                        and any other information you want to edit, as shown in the following example.</para>
                    <example>
                        <title>Request
                        </title>
                        <programlisting>PUT /{tenantId}/groups/{groupId}/launch</programlisting>
                        <programlisting language="json">
                            <xi:include href="./samples/reqPutLaunchConfig.json" parse="text" />
                        </programlisting>
                    </example>
                    <para>If the
                        <command>PUT</command>request is successful, a 204 response code with an empty response
                        body will be returned.
                    </para>
                </section>
                <section xml:id="Pause_Execution_of_Scaling_Policies">
                    <title>Pause execution of all scaling policies</title>
                    <para>
                        <note>
                            <para>The Pause feature has not been implemented in the Auto Scale API yet but
                                will be implemented in a future release.
                            </para>
                        </note>
                    </para>
                    <para>To pause all execution of scaling policies for a scaling group, submit a
                        <command>POST</command>request with the
                        <parameter>tenantId</parameter>and
                        <parameter>groupId</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request
                        </title>
                        <programlisting>POST /{tenantId}/groups/{groupId}/pause</programlisting>
                    </example>
                    <para>If the
                        <command>POST</command>request is successful, a 204 response code is returned with an
                        empty response body.
                    </para>
                </section>
                <section xml:id="Resume_Execution_of_Scaling_Policies">
                    <title>Resume execution of all policies for a scaling group
                    </title>
                    <para>
                        <note>
                            <para>The Resume feature has not been implemented in the Auto Scale API yet but
                                will be implemented in a future release.
                            </para>
                        </note>
                    </para>
                    <para>To resume execution of all scaling policies for a scaling group, submit a
                        <command>POST</command>request with the
                        <parameter>tenantId</parameter>and
                        <parameter>groupId</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>POST /{tenantId}/groups/{groupId}/resume</programlisting>
                    </example>
                    <para>If the
                        <command>POST</command>request is successful, a 204 response code is returned with an
                        empty response body.
                    </para>
                </section>
            </section>
            <section xml:id="Create_Scaling_Policies">
                <title>Create and manage scaling policies</title>
                <para>You can use the Auto Scale API to create and manage the scaling policies for your scaling
                    group. Create a scaling policy by submitting a
                    <command>POST</command>request that contains the
                    <parameter>tenantID</parameter>that you obtained during the
                    <olink targetdoc="autoscale-getting-started"
                    targetptr="Authenticate">“Authenticate”</olink>step and the
                    <parameter>groupID</parameter>that you obtained during the
                    <olink targetdoc="autoscale-getting-started" targetptr="Create_Group">“Create and Manage a Scaling Group”
                    </olink>step.</para>
                <para>You can specify multiple policies to manage your scaling group.
                </para>
                <para>
                    <note>
                        <para>Executing a scaling policy always returns a
                            <code>202 Accepted
                            </code>status. This status indicates that the scaling policy was executed
                            but does not indicate whether the execution successfully caused the scaling
                            group to scale. If some element of the configuration is invalid, scaling
                            can fail even if the scaling policy is executed.
                        </para>
                    </note>
                </para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <link linkend="Create_a_Scaling_Policy">Create a scaling policy</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Obtain_List_of_Scaling_Policies">List scaling policies</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Getting_Individual_Scaling_Policy">Get an individual scaling policy</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Updating_Scaling_Policy">Update a scaling policy</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Deleting_Scaling_Policy">Delete a scaling policy</link>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <section xml:id="Create_a_Scaling_Policy">
                    <title>Create a scaling policy</title>
                    <para>To create a scaling policy, submit a
                        <command>POST</command>request with the
                        <parameter>tenantId</parameter>and
                        <parameter>groupId</parameter>parameters specified in the request URL. The following example
                        shows how to create a policy that scales the group up by one server with a cooldown
                        phase of 150 seconds and a scaling policy that scales the group down by 5.5 percent
                        with a cooldown phase of 6 seconds.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            POST https://autoscale.api.rackspacecloud.com/v1.0/{tenantID}/groups/{groupID}/policies/
                        </programlisting>
                    </example>
                    <programlisting language="json">
                        <xi:include href="./samples/reqCreatePolicies.json" parse="text" />
                    </programlisting>
                    <para>If the
                        <command>POST</command>request is successful, an array of scaling policies is provided
                        in the request body in JSON format, as shown in the following example.</para>
                    <example>
                        <title>Response to successful create a scaling policy request</title>
                        <programlisting
                        language="json">
                            <xi:include href="./samples/resCreatePolicies.json" parse="text" />
                            </programlisting>
                    </example>
                </section>
                <section xml:id="Obtain_List_of_Scaling_Policies">
                    <title>List scaling policies</title>
                    <para>To obtain a list of scaling policies for a scaling group, submit a
                        <command>GET</command>request with the
                        <parameter>tenantId</parameter>and
                        <parameter>groupId</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            GET /{tenantId}/groups/{groupId}/policies
                        </programlisting>
                    </example>
                    <para>If the
                        <command>GET</command>request is successful, the response data will be returned in JSON
                        format as shown in the following example:</para>
                    <example>
                        <title>Response to successful list scaling policies request</title>
                        <programlisting
                        language="json">
                            <xi:include href="./samples/resGetPolicies.json" parse="text" />
                            </programlisting>
                    </example>
                </section>
                <section xml:id="Getting_Individual_Scaling_Policy">
                    <title>Get an individual scaling policy</title>
                    <para>To obtain information about an individual scaling policy, including policy id, name,
                        type, adjustment, and cooldown, submit a
                        <command>GET</command>request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter>and
                        <parameter>policyId</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            GET /{tenantId}/groups/{groupId}/policies/{policyId}
                        </programlisting>
                    </example>
                    <para>If the
                        <command>GET</command>request is successful, the data will be returned in the response
                        body in JSON format as shown in the following example:</para>
                    <example>
                        <title>Response to a successful get an individual scaling policy request</title>
                        <programlisting
                        language="json">
                            <xi:include href="./samples/resGetPolicy.json" parse="text" />
                            </programlisting>
                    </example>
                </section>
                <section xml:id="Updating_Scaling_Policy">
                    <title>Update a scaling policy</title>
                    <para>To update a scaling policy, submit a
                        <command>PUT</command>request, with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter>and
                        <parameter>policyId</parameter>parameters specified in the request URL. In the request body
                        provide a name for the policy, a change value, and a value for the cooldown and
                        a method for triggering the policy, for example a webhook. In the following example,
                        the configuration is scaled up by one server with a cooldown phase of 1800 seconds.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            PUT /{tenantId}/groups/{groupId}/policies/{policyId}
                        </programlisting>
                        <programlisting language="json">
                            <xi:include href="./samples/reqPutPolicy.json" parse="text" />
                        </programlisting>
                    </example>
                    <para>If the
                        <command>PUT</command>request is successful, a 204 response code with an empty response
                        body will be returned.</para>
                </section>
                <section xml:id="Deleting_Scaling_Policy">
                    <title>Delete a scaling policy</title>
                    <para>To delete a scaling policy, submit a
                        <command>DELETE</command>request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter>and
                        <parameter>policyId</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            DELETE /{tenantId}/groups/{groupId}/policies/{policyId}
                        </programlisting>
                    </example>
                    <para>If the
                        <command>DELETE</command>request is successful, a 204 response code with an empty response
                        body will be returned.</para>
                </section>
            </section>
            <section xml:id="Create_and_Manage_Webhooks">
                <title>Create and manage webhooks</title>
                <para>After creating your policy, you need to specify a webhook to tie your scaling policy
                    to events. Webhooks are URLs that can activate the policy without authentication.
                    When a webhook is set, a pre-configured event, such as an alarm set through Cloud
                    Monitoring, causes an HTTP POST callback request to be sent to a configured URI.</para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                <link linkend="Create_scaling_webhook">Create a webhook
                                </link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Get_List_of_Scaling_Webhooks">List all webhooks and their IDs</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Update_Scaling_Webhook">Update a webhook
                                </link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Get_Info_About_Webhook">Get information about a specific webhook</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link linkend="Delete_Scaling_Webhook">Delete a webhook
                                </link>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <section xml:id="Create_scaling_webhook">
                    <title>Create a webhook</title>
                    <para>To create a webhook, submit a
                        <command>POST</command>
                        request with the
                        <parameter>tenantID</parameter>,
                        <parameter>groupID</parameter>, and
                        <parameter>policyID</parameter>specified in the request URL. In the request body, specify
                        the name of the webhook, as well as any metadata for the webhook. The following
                        example shows how to create a webhook for a scaling policy.
                    </para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            POST https://autoscale.api.rackspacecloud.com/v1.0/{tenantID}/groups/{groupID}/policies/{policyID}/webhooks
                        </programlisting>
                        <programlisting language="json">
                            <xi:include href="./samples/reqCreateWebhook.json" parse="text" />
                        </programlisting>
                    </example>
                    <para>If the
                        <command>POST</command>request is successful, the data will be returned in JSON format
                        as shown in the following example:</para>
                    <example>
                        <title>Response to a successful create a webhook request</title>
                        <programlisting language="json">
                            <xi:include href="./samples/resCreateWebhook.json" parse="text" />
                        </programlisting>
                    </example>
                </section>
                <section xml:id="Get_List_of_Scaling_Webhooks">
                    <title>List webhooks and their IDs</title>
                    <para>To obtain a list of all scaling webhooks and their corresponding ids, submit a
                        <command>GET</command>request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter>and
                        <parameter>policyId</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            GET /{tenantId}/groups/{groupId}/policies/{policyId}/webhooks
                        </programlisting>
                    </example>
                    <para>If the
                        <command>GET</command>request is successful, the data will be returned in the response
                        body in JSON format as shown in the following example:</para>
                    <example>
                        <title>Response to a successful list all webhooks request</title>
                        <programlisting
                        language="json">
                            <xi:include href="./samples/resGetWebhooks.json" parse="text" />
                            </programlisting>
                    </example>
                </section>
                <section xml:id="Update_Scaling_Webhook">
                    <title>Update a webhook</title>
                    <para>To modify a scaling webhook, submit a
                        <command>PUT</command>request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter>,
                        <parameter>policyId</parameter>and
                        <parameter>webhookId</parameter>parameters specified in the request URL. In the request
                        body, specify a name and metadata for the webhook as shown in the following example.
                    </para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            PUT /{tenantId}/groups/{groupId}/policies/{policyId}/webhooks/{webhookId}
                        </programlisting>
                        <programlisting language="json">
                            <xi:include href="./samples/reqPutWebhook.json" parse="text" />
                        </programlisting>
                    </example>
                    <para>If the
                        <command>PUT</command>request is successful, a 204 response code with an empty response
                        body will be returned.
                    </para>
                </section>
                <section xml:id="Get_Info_About_Webhook">
                    <title>Get information about a specific webhook</title>
                    <para>To obtain details about a specific webhook, submit a
                        <command>GET</command>request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter>,
                        <parameter>policyId</parameter>and
                        <parameter>webhookId</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            GET /{tenantId}/groups/{groupId}/policies/{policyId}/webhooks/{webhookId}
                        </programlisting>
                    </example>
                    <para>If the
                        <command>GET</command>request is successful, the data will be returned in JSON format
                        as shown in the following example:</para>
                    <example>
                        <title>Response to successful get information about a webhook request</title>
                        <programlisting
                        language="json">
                            <xi:include href="./samples/resGetWebhook.json" parse="text" />
                            </programlisting>
                    </example>
                </section>
                <section xml:id="Delete_Scaling_Webhook">
                    <title>Delete a webhook</title>
                    <para>To delete a webhook, submit a
                        <command>DELETE</command>
                        request with the
                        <parameter>tenantID</parameter>,
                        <parameter>groupID</parameter>,
                        <parameter>policyID</parameter>, and the
                        <parameter>webhookID</parameter>parameters specified in the request URL.</para>
                    <example>
                        <title>Request</title>
                        <programlisting>
                            DELETE /{tenantId}/groups/{groupId}/policies/{policyId}/webhooks/{webhookId}
                        </programlisting>
                    </example>
                    <para>If the DELETE request is successful, a 204 response code with an empty response body
                        will be returned.</para>
                </section>
            </section>
            <section xml:id="Execute_Scaling_Policy">
                <title>Execute a scaling policy</title>
                <para>After you define a scaling policy, you can activate that policy by issuing a
                    <command>POST</command>request against its URL.</para>
                <para>To activate a scaling policy, submit a
                    <command>POST
                    </command>request with the
                    <parameter>tenantId</parameter>,
                    <parameter>groupId</parameter>and
                    <parameter>policyId</parameter>parameters specified in the request URL.</para>
                <example>
                    <title>Request</title>
                    <programlisting>
                        POST /{tenantId}/groups/{groupId}/policies/{policyId}/execute
                    </programlisting>
                </example>
                <para>The
                    <command>POST</command>request causes the
                    <link linkend="Create_Scaling_Policies">scaling policy</link>to execute, which causes the scaling group to transform if it
                    is able to do so.</para>
                <para>Execution of a scaling policy always returns a
                    <code>202 Accepted
                    </code>status. This status indicates that the scaling policy was executed but does
                    not indicate whether the execution successfully caused the scaling group to scale.
                    If some element of the configuration is invalid, scaling can fail even if the scaling
                    policy is executed.</para>
            </section>
            <xi:include href="./chapters/rbac.xml"/>
        </chapter>
        <xi:include href="./chapters/apiref.xml" />
</book>
