<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash "&#x2013;">
<!ENTITY mdash "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY GET '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

<!ENTITY PRODNAME "Rackspace Auto Scale"> <!-- in PDF: for line 1 on the cover page -->
<!ENTITY PRODABBV "Rackspace Auto Scale"> <!-- in PDF: for page headers -->
<!ENTITY PROD "Auto Scale"> <!-- in body -->

<!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
<!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
<!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
<!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
<!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">

<!ENTITY CHECK '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Check_mark_23x20_02.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>

<!ENTITY ARROW '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Arrow_east.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>

<!-- Useful for specs -->
<!ENTITY MAY '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MAY</emphasis>'>
<!ENTITY SHOULD '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD</emphasis>'>
<!ENTITY MUST '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST</emphasis>'>
<!ENTITY MUST_NOT '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST NOT</emphasis>'>
]>

<book version="5.0" 
      xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xml:id="autoscale-getting-started"
      xmlns:raxm="http://docs.rackspace.com/api/metadata"
      xlink:href="http:// docs.autoscale.apiary.io/ ">
<!-- The &PRODNAME; and &PRODABBV; are set in the entities at the top of this document -->
<title>&PRODNAME; Getting Started Guide</title>
<titleabbrev>&PRODABBV; Intro</titleabbrev>    
<?rax title.font.size="35px" subtitle.font.size="20px"
      status.bar.text="Early Access" 
      canonical.url.base="http://docs.rackspace.com/autoscale/api/v1.0/cas-gettingstarted/content"?>
    <info>
        <releaseinfo>API v1.0</releaseinfo>
        <productname>&PRODNAME;</productname>
        <!-- enter the publication date of this document; in revhistory, explain what changed -->
        <pubdate>2013-10-15</pubdate>
        <copyright>
            <year>2013</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the
                    template.</remark>
            </annotation>
        </legalnotice>
        <revhistory>
            <revision>
                <date>2013-10-15</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Adding new content on Deleting a Scaling Group</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2013-08-13</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Initial Early Access release.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision> 
            <revision>
                <date>2013-08-02</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Additional updates after
                                edit.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2013-07-22</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Initial internal draft for preview
                                release.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
        <raxm:metadata role="hidden">
            <raxm:displayname>Getting Started Guide</raxm:displayname>
            <raxm:product version="v1.0">cas</raxm:product>
            <raxm:priority>10</raxm:priority>
        </raxm:metadata>
    </info>
    <chapter xml:id="Overview">
        <title>Overview</title>
        <para> The &PRODNAME; service responds to events by changing
            server capacity to meet current needs. This ability to
            expand the cloud server configuration in response to
            increased workload means that you can begin with a minimal
            cloud configuration and grow only when the cost of that
            growth is justified. </para>
        <section xml:id="Doc_Change_History">
            <title>Document Change History</title>
            <para> This version of the document replaces and obsoletes
                all previous versions. The most recent changes are
                described in the following table: </para>
            <?rax revhistory?>
        </section>
        <!-- try again later
<xi:include href="./chapters/resources.xml"/>
-->
        <section xml:id="Resources"
            xmlns:xlink="http://www.w3.org/1999/xlink">
            <title>Additional Resources</title>
            <para> You can view and experiment with all &PRODNAME; API
                calls at <link
                    xlink:href="http://docs.autoscale.apiary.io/"
                    >http://docs.autoscale.apiary.io/</link>. </para>
            <para>To run the examples in this guide, the following
                prerequisites are required:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Rackspace Cloud account. To sign up for
                            a Rackspace Cloud account, go to the
                            Rackspace Public Cloud <link xlink:href="https://cart.rackspace.com/cloud/signup/">signup page</link>. </para>
                    </listitem>
                    <listitem>
                        <para>Rackspace username and password
                            specified during registration</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>To use Rackspace Autoscale, you need to be able to
                complete the following tasks:</para>
            <itemizedlist>
                <listitem>
                    <para>
                        Configure alarms by using Cloud Monitoring.
                        For more information, see the <link xlink:href="http://docs.rackspace.com/cm/api/v1.0/cm-getting-started/content/index.html">Rackspace Cloud Monitoring Getting
                        Started Guide</link>.
                    </para> 
                </listitem>
                <listitem>
                    <para>
                        Create servers by using Cloud Servers. For
                        more information, see the <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/index.html"
                        >Next
                        Generation Cloud Serversâ„¢ Developer
                        Guide</link>.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        Create load balancers by using Cloud Load
                        Balancers. For more information see the <link
                        xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-devguide/content/index.html">Rackspace Cloud Load Balancers Developers
                        Guide</link>.
                    </para>
                </listitem>
            </itemizedlist>
            <para>You
                can view detailed information about the Rackspace
                Autoscale API at <link xlink:href="http:// docs.autoscale.apiary.io/ ">http://
                    docs.autoscale.apiary.io/ </link></para>
        </section>
    </chapter>
    <chapter xml:id="Core_Concepts">
        <title>Core Concepts</title>
        <para>Rackspace supports &PROD;, an API-based tool that
            automatically scales resources as a response to an
            increase or decrease in overall workload based on
            user-defined thresholds. </para>
        <para>&PROD; functions by linking these services: <itemizedlist>
                <listitem>
                    <para><link
                            xlink:href="http://docs.rackspace.com/cm/api/v1.0/cm-getting-started/content/Introduction.html"
                            >Rackspace Cloud Monitoring</link>
                    </para>
                </listitem>
                <listitem>
                    <para> &PROD; API </para>
                </listitem>
                <listitem>
                    <para> Load-balanced cloud servers, such as <link
                            xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-getting-started/content/Create_Cloud_Server.html"
                            >Rackspace Cloud Load Balancers working
                            with Cloud Servers</link></para>
                </listitem>
            </itemizedlist>You can set up a schedule for launching
            Autoscale or define an event that is triggered by Cloud
            Monitoring. You can also specify a minimum and maximum
            number of cloud servers, the amount of resources you want
            to increase or decrease and the thresholds in Cloud
            Monitoring that triggers the scaling activities.</para>
        <section xml:id="Basic_Workflow">
            <title>Basic Workflow</title>
            <para> Rackspace Autoscaling works the following way: </para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>In Cloud Monitoring, you configure
                            alarms that are triggered when a high
                            utilization of resources occurs.</para>
                    </listitem>
                    <listitem>
                        <para>When Cloud Monitoring sets off an alarm
                            for high utilization of resources within a
                            group, a webhook is triggered. </para>
                    </listitem>
                    <listitem>
                        <para> The webhook launches the Rackspace
                            Autoscale service, which looks up the
                            policy that has been defined in accordance
                            with the webhook. This policy determines
                            the amount of cloud servers that need to
                            be added or removed in case the alarm is
                            triggered. </para>
                    </listitem>
                </orderedlist>
            </para>
            <para> Scale down events remove the oldest server in the
                group. </para>
            <para>The Rackspace Autoscale service supports a cooldown
                feature. By configuring cooldown periods between
                triggers, you can control how quickly Autoscale scales
                up toward the scaling group's maximum size or down
                toward the scaling group's minimum size. A cooldown is
                a period during which no other scaling activity
                occurs. </para>
            <para>Cooldowns work the following way:<itemizedlist>
                    <listitem>
                        <para>Cooldowns allow some time for the
                            initial scaling response to take effect,
                            potentially resolving the situation that
                            triggered the policy. When a scaling
                            policy is triggered, cooldown periods
                            begin for both the scaling policy and the
                            group. </para>
                    </listitem>
                    <listitem>
                        <para>While the cooldown is active, any
                            additional requests to the group or to the
                            specific policy are ignored. </para>
                    </listitem>
                    <listitem>
                        <para>After the cooldown period ends, if Cloud
                            Monitoring still detects the situation
                            that triggered the initial scaling
                            activity, another alarm triggers another
                            round of scaling activity. </para>
                    </listitem>
                </itemizedlist></para>
            <para> &PROD; does not configure anything within a server.
                You must configure your services to function properly
                when each server is started. We recommend automating
                your servers' startup processes with <link
                    xlink:href="http://www.opscode.com/chef/"
                    >Chef</link> or a similar tool. </para>
        </section>
        <section xml:id="Sample_Use_Case">
            <title>Sample Use Case<?sbr?><?sbr?><?sbr?></title>
            <para>Let's consider the following scenario:</para>
            <para><itemizedlist>
                    <listitem>
                        <para>A scaling group consists of five cloud
                            servers.</para>
                    </listitem>
                    <listitem>
                        <para>Cloud Monitoring is configured to
                            monitor the CPU usage of the five cloud
                            servers.</para>
                    </listitem>
                    <listitem>
                        <para>Monitoring is configured to trigger an
                            alarm when CPU utilization for any server
                            within the group is at 90%.</para>
                    </listitem>
                    <listitem>
                        <para>The alarm triggers a webhook that has
                            been previously configured.</para>
                    </listitem>
                    <listitem>
                        <para>When the webhook is activated, Autoscale
                            receives the alert and executes the policy
                            associated with the webhook: "When this
                            webhook is triggered, create five servers
                            according to the launch configuration, and
                            add them to the load balancer."</para>
                    </listitem>
                    <listitem>
                        <para>Autoscale initates creation of those
                            servers within the scaling group.</para>
                    </listitem>
                </itemizedlist>Autoscale can also work in the opposite
                direction. A policy can say "When this webhook is
                triggered, scale down by five servers." </para>
        </section>
    </chapter>
    <chapter xml:id="Autoscale_Components">
        <title>Autoscale Components</title>
        <para> &PROD; consists of the following components:
                <itemizedlist spacing="compact">
                <listitem>
                    <para>
                        <link linkend="Group_Configuration">Scaling
                            Group Configuration</link>
                    </para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="Launch_Configuration">Launch
                            Configuration </link></para>
                </listitem>
                <listitem>
                    <para>
                        <link linkend="Scaling_Policies">Scaling
                            Policies </link></para>
                </listitem>
            </itemizedlist></para>
        <section xml:id="Group_Configuration">
            <title>Scaling Group Configuration</title>
            <para>The scaling group configuration specifies the basic
                elements of the Auto Scale configuration. It manages
                how many servers can participate in the scaling group. </para>
            <para> The group configuration specifies the following
                items: <itemizedlist spacing="compact">
                    <listitem>
                        <para> Group Name </para>
                    </listitem>
                    <listitem>
                        <para> Group Cooldown </para>
                    </listitem>
                    <listitem>
                        <para> Minimum number of entities required in
                            the scaling group </para>
                    </listitem>
                    <listitem>
                        <para> Maximum number of entities allowed in
                            the scaling group </para>
                    </listitem>
                </itemizedlist></para>
            <para>Within the group configuration, group cooldown
                describes, in seconds, how long the group must wait
                after a scaling policy is triggered before another
                request for scaling is accepted. </para>
        </section>
        <section xml:id="Launch_Configuration">
            <title>Launch Configuration</title>
            <para> The launch configuration manages the process of
                creating new servers. It specifies what type of server
                image will be started on launch, what flavor the new
                server is, and which load balancer the new server
                connects to. </para>
            <para> The launch configuration specifies the following
                items: <itemizedlist>
                    <listitem>
                        <para> Launch Configuration Type </para>
                        <itemizedlist>
                            <listitem>
                                <para> Launch Server <?sbr?>
                                   <emphasis role="italic"> (For the
                                   Preview release, this is the only
                                   configuration type.) </emphasis>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para> Server - specifies details about the
                            server</para>
                        <itemizedlist>
                            <listitem>
                                <para> Name </para>
                            </listitem>
                            <listitem>
                                <para> flavorRef </para>
                            </listitem>
                            <listitem>
                                <para> imageRef <?sbr?>
                                   <emphasis role="italic"> (This is
                                   the ID of the Cloud Server image to
                                   start.) </emphasis>
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para> Load Balancer- specifies details about
                            the load balancer </para>
                        <itemizedlist>
                            <listitem>
                                <para> loadBalancerID </para>
                            </listitem>
                            <listitem>
                                <para> port </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </para>
            <tip>
                <para> To learn more about configuring cloud servers
                    through an API, read the following: <itemizedlist>
                        <listitem>
                            <para>
                                <link
                                   xlink:href="http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/overview.html"
                                   >Next Generation Cloud Servers
                                   Getting Started</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link
                                   xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/ch_api_operations.html"
                                   >Next Generation Cloud Servers
                                   Developer Guide</link>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para> To learn more about configuring cloud load
                    balancers through an API, read the following: <itemizedlist>
                        <listitem>
                            <para>
                                <link
                                   xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-getting-started/content/DB_Overview.html"
                                   >Rackspace Cloud Load Balancers
                                   Getting Started</link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link
                                   xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-devguide/content/API_Operations-d1e1354.html"
                                   >Rackspace Cloud Load Balancers
                                   Developer Guide</link>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para xlink:href="http://community.rackspace.com">The
                    Rackspace Open Cloud Community is a great place to
                    learn about working with cloud resources through
                    APIs or an other Cloud technologies. Visit the
                    Developer Forum at <link
                        xlink:href="https://community.rackspace.com/developers/default"
                        >https://community.rackspace.com/developers/default</link>. </para>
            </tip>
        </section>
        <section xml:id="Scaling_Policies">
            <title>Scaling Group Policies</title>
            <para>Scaling group policies specify how to modify the
                scaling group and its behavior. You can specify
                multiple policies to manage a scaling group. </para>
            <para>Scaling policies specify the following:</para>
            <para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para> Name of the scaling policy</para>
                    </listitem>
                    <listitem>
                        <para> Change value <?sbr?>
                            <emphasis role="italic"> (incremental or
                                per cent) </emphasis>
                        </para>
                    </listitem>
                    <listitem>
                        <para> Policy cooldown time <?sbr?>
                            <emphasis role="italic"> (in seconds)
                            </emphasis>
                        </para>
                    </listitem>
                    <listitem>
                        <para>Webhook execution <emphasis
                                role="italic"> (auto-generated)
                            </emphasis>
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </chapter>
    <chapter xml:id="Autoscale_API">
        <title>Using the &PROD; API</title>
        <para>You can create a autoscaling group by following the
            steps described in this chapter. </para>
        <para>There are several options for sending requests through
            an API: </para>
        <itemizedlist>
            <listitem>
                <para>Developers and testers can use cURL, the
                    command-line tool from <link
                        xlink:href="http://curl.haxx.se/"
                        >http://curl.haxx.se/</link>. With cURL you
                    can send HTTP requests and receive responses from
                    the command line. </para>
            </listitem>
            <listitem>
                <para>If you prefer a more graphical interface, the
                    ReST client for Firefox also works for testing API
                    calls. For more information, see <link
                        xlink:href="https://addons.mozilla.org/en-US/firefox/addon/restclient/"
                        >https://addons.mozilla.org/en-US/firefox/addon/restclient/</link>.
                </para>
            </listitem>
            <listitem>
                <para>You can also download and install rest-client
                    from <link
                        xlink:href="http://code.google.com/p/rest-client/"
                        >http://code.google.com/p/rest-client/</link>.
                    Test-client is a Java application that lets you
                    test ReSTful web services. </para>
            </listitem>
        </itemizedlist>
        <para>
            <tip>
                <para> If you want to try these steps in your own
                    environment, you can use <link
                        xlink:href="http://docs.autoscale.apiary.io/"
                        >http://docs.autoscale.apiary.io/</link> to
                    generate cURL commands. </para>
            </tip>
        </para>
        <section xml:id="Authenticate">
            <title>Authenticate</title>
            <para>As with all Rackspace APIs, before you can use the
                Autoscale API you must authenticate with your
                Rackspace credentials. </para>
      <itemizedlist>
          <listitem>
              <para> When you authenticate, you submit your credentials
                  to the Rackspace Cloud Identity Service.</para>
          </listitem>
                    <listitem>
                        <para> If your credentials are valid, the
                            Identity Service responds with your
                            Service Catalog, which includes your
                            token, token ID, user ID, and token tenant
                            ID. </para>
                    </listitem>
                    <listitem>
                        <para>To make requests of &PROD;, you must use
                        your token tenant ID, also known as the
                        tenantID. </para>
                    </listitem>
                </itemizedlist>
            <para> If you subscribe to many Rackspace services, your
                Service Catalog response might be lengthy. For an
                example of an annotated Service Catalog response,
                showing how to recognize the token and other elements
                in both JSON and XML formats, see <link
                    xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Sample_Request_Response-d1e64.html"
                    >http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Sample_Request_Response-d1e64.html</link>. </para>
            <para> After you have your token, you can use it to
                identify yourself to &PRODNAME; and other services. </para>
            <tip>
                <para> For detailed information about the Rackspace
                    Cloud Identity Service, visit <link
                        xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/QuickStart-000.html"
                        >http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/QuickStart-000.html</link>.</para>
            </tip>
            <para>To authenticate access to Rackspace Cloud
                services, you issue an authentication request to
                the Rackspace Cloud Identity Service, which is an
                implementation of the OpenStack Keystone Identity
                Service v2.0. </para>
            <important>
                <para>Multiple Rackspace Cloud Identity Service endpoints exist. You may use any endpoint, regardless of where your account was created. </para>
            </important>
            <para>The following table shows a list of valid
                endpoints:</para>
            <table rules="all">
                <caption>Regionalized Service Endpoints</caption>
            <thead>
                <tr align="center">
                    <td colspan="2">Region</td>
                    <td colspan="5">Endpoint</td>
                </tr>
            </thead>
            <tbody>
                <tr align="left">
                    <td colspan="2">US</td>
                    <td colspan="5"
                        ><code>https://ord.autoscale.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                    </td>
                </tr>
                <tr align="left">
                    <td colspan="2">UK</td>
                    <td colspan="5"
                        ><code>https://dfw.autoscale.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                    </td>
                </tr>
                <tr align="left">
                    <td colspan="2">London (LON)</td>
                    <td colspan="5">
                        <code>https://lon.autoscale.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                    </td>
                </tr>
                <tr align="left">
                    <td colspan="2">Sydney (SYD)</td>
                    <td colspan="5">
                        <code>https://syd.autoscale.api.rackspacecloud.com/v1.0/</code><parameter>1234</parameter>/
                    </td>
                </tr>
            </tbody>
            </table>
    
            <section xml:id="Authenticate_using_cURL">
           <title>Authenticate using cURL</title>
                <para>To authenticate against the Rackspace Autoscale API, you issue a POST request to the appropriate Rackspace Cloud Identity Service endpoint.
                    
                    
                    In the request body, supply one of the following sets of credentials:</para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>user name and password</para>
                        </listitem>
                        <listitem>
                            <para>user name and API key</para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>You need to use your username and password to log into the Rackspace Cloud Control Panel.</para>
                <para>To obtain your API key, log into <link
                        xlink:href="http://mycloud.rackspace.com."
                        >http://mycloud.rackspace.com</link>, click
                    your username, and select <emphasis role="bold"
                        >API Keys</emphasis> to get your key.</para>
                <para>
                    <example>
                        <title>Authenticate with Username and API Key:
                            JSON Request</title>
                        <programlisting>$ curl -s https://identity.api.rackspacecloud.com/v2.0/tokens -X 'POST' \
       -d '{"auth":{"RAX-KSKEY:apiKeyCredentials":{"username":"theUserName","apiKey":"0000000000000000000"}}}' \
       -H "Content-Type: application/json" | python -m json.tool </programlisting>
                    </example>
                    </para>
                   
            </section>
        </section>
        <section xml:id="Save_Image">
            <title>Save an Image</title>
            <para>After authenticating to the Web service you create a
                cloud server using one of the following
                methods:</para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para> Create a server through the <link
                                xlink:href="http://mycloud.rackspace.com/"
                                >Control Panel</link>. </para>
                    </listitem>
                    <listitem>
                        <para>Create a server through the Cloud
                            Servers API by using a <link
                                xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/CreateServers.html"
                                >Create Server</link> request. </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para> With the Cloud Servers API, you can use a 
                <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/Images-d1e4427.html">List Images</link>
                request to retrieve a list of options available for configuring your server. 
                <example>
                    <title>Requesting a List of Cloud Server
                        Images</title>
                    <para>The following example shows how to request a list cloud server images.</para>
                    <programlisting language="bash">$ curl -X GET \
        -H "Content-Type: application/json" \
        -H "X-Auth-token:{auth-token}" \
        https://ord.servers.api.rackspacecloud.com/v2/{tenant-id}/images?type=SNAPSHOT | python -mjson.tool
                    </programlisting>
                </example>
            </para>
            <para>After creating your server you customize it so that
                it can process your requests. For example, if you are
                building a webhead scaling group, configure Apache to
                start on launch and serve the files that you need. </para>
            <para> After you have created and customized your server,
                save its image and record the imageID value that is
                returned in the response body. </para>
        </section>
        <section xml:id="Create_Group">
            <title>Create and Manage a Scaling Group</title>
            <para>You can use the Autoscale API to create and manage
                your scaling group.</para>
            <example>
                <title>Creating a Scaling Group</title>
                <para>To create a scaling group, submit a
                        <command>POST</command> request with the
                        <parameter>tenantID</parameter> that you
                    obtained during the <link linkend="Authenticate"
                        >Authentication</link> step.The following
                    example shows how to create a scaling group. </para>
                <programlisting>POST https://autoscale.api.rackspacecloud.com/v1.0/{tenantID}/groups/
                </programlisting>
                <programlisting language="json"><xi:include href="./samples/reqCreateGroup.json" parse="text"/></programlisting>
                <para>The <command>POST</command> request creates a
                    scaling group, starts the minimum number of
                    servers, and attaches those servers to the
                    specified load balancer. </para>
                <para>If the <command>POST</command> request is
                    successful, the response data will be returned in
                    JSON format as shown in the following
                    example:</para>
                <programlisting language="json"><xi:include href="./samples/resCreateGroup.json" parse="text"/></programlisting>
            </example>
            <example>
                <title>List all Scaling Groups</title>
                <para>To obtain a list of all scaling groups, submit a
                        <command>GET</command> request with the
                        <parameter>tenantId</parameter> parameter
                    specified in the request URL.</para>
                <programlisting>GET /{tenantId}/groups
                </programlisting>
                <para>The following example shows a response for the
                        <command>GET</command> request with a list of
                    all scaling groups:</para>
                <programlisting language="json"><xi:include href="./samples/resGetGroups.json" parse="text"/></programlisting>
            </example>
            <example>
                <title>Manifested View of a Scaling Group
                    Configuration</title>
                <para>To obtain a detailed view of your scaling group
                    configuration, including the launch configuration,
                    and the scaling policies, submit a
                        <command>GET</command> request with the
                        <parameter>tenantId</parameter> and
                        <parameter>groupId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting>GET /{tenantId}/groups/{groupId}</programlisting>
                <para>If the <command>GET</command> request is
                    successful, the data is returned in the body of
                    the response in JSON format as shown in the
                    following example</para>
                <programlisting language="json"><xi:include href="./samples/resGetGroupManifest.json" parse="text"/></programlisting>
            </example>
            <example>
                <title>Get the Current State of a Scaling
                    Group</title>
                <para>To obtain the current state of a scaling group,
                    including the current set of active entities, the
                    number of pending entities, and the desired number
                    of entities, submit a <command>GET</command>
                    request with the <parameter>tenantId</parameter>
                    and <parameter>groupId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting>GET /{tenantId}/groups/{groupId}</programlisting>
                <para>If the <command>GET</command> request is
                    successful, the data is returned in the body of
                    the response in JSON format as shown in the
                    following example:</para> 
                <programlisting language="json"><xi:include href="./samples/resGetGroupState.json" parse="text"/>
</programlisting>
            </example>
        </section>
        <section xml:id="Manage_Launch_Configuration">
            <title>Manage the Launch Configuration for your
                Scaling Group</title>
            <para>You can use the Auto Scale API to view and update
                the launch configuration for your scaling
                group.</para>
            <example>
                <title>Get the Current Configuration for your Scaling Group</title>
                <para>To obtain the configuration for a scaling group,
                    which includes the minimum number of entities, the
                    maximum number of entities, global cooldown, and
                    other metadata, submit a <command>GET</command>
                    request with the <parameter>tenantId</parameter>
                    and <parameter>groupId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting>GET /{tenantId}/groups/{groupId}/config</programlisting>
                <para>If the <command>GET</command> request is
                    successful, the data is returned in the body of
                    the response in JSON format as shown in the
                    following example:</para> 
                <programlisting language="json"><xi:include href="./samples/resGetLaunchConfig.json" parse="text"/>
</programlisting>
            </example>
            <example>
                <title>Edit the Current Configuration for your Scaling
                    Group</title>
                <para>To edit the configuration for a scaling group,
                    which includes the minimum number of entities, the
                    maximum number of entities, global cooldown, and
                    other metadata, submit a <command>PUT</command>
                    request with the <parameter>tenantId</parameter>
                    and <parameter>groupId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting> PUT /{tenantId}/groups/{groupId}/config </programlisting>
                <programlisting language="json"><xi:include href="./samples/reqPutGroupConfig.json" parse="text"/>
</programlisting>
                <para>If the <command>PUT</command> request is
                    successful, a 204 response code with an empty
                    response body will be returned </para>
            </example>
            <example>
                <title>Get the Launch Configuration for your Scaling Group</title>
                <para>To obtain the launch configuration for a scaling
                    group, which includes the details of how to create
                    a server, from what image, which load balancers to
                    join it to, what networks to add it to, and other
                    metadata, submit a <command>GET</command> request
                    with the <parameter>tenantId</parameter> and
                        <parameter>groupId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting> GET /{tenantId}/groups/{groupId}/launch</programlisting>
                <para>If the <command>GET</command> request is
                    successfull, the data will be returned in the body
                    of the response in JSON format as shown in the
                    following example:</para>
                <programlisting language="json">
<xi:include href="./samples/resGetLaunchConfig.json" parse="text"/>
</programlisting>
            </example>
            <example>
                <title>Edit the Launch Configuration for your Scaling Group</title>
                <para>To edit the launch configuration for a scaling
                    group, inlucding how to create a server, from what
                    image, which load balancers to join it to, and
                    what networks to add it to, and other metadata,
                    submit a <command>PUT</command> request with the
                        <parameter>tenantId</parameter> and
                        <parameter>groupId</parameter>parameters
                    specified in the request URL. In the request body,
                    specify the details about the server type, server
                    image, load balancers, network, and any other
                    information you want to edit, as shown in the
                    following example. </para>
                <programlisting> PUT /{tenantId}/groups/{groupId}/launch </programlisting>
                <programlisting language="json"><xi:include href="./samples/reqPutLaunchConfig.json" parse="text"/>
</programlisting>
                <para>If the <command>PUT</command> request is
                    successful, a 204 response code with an empty
                    response body will be returned.</para>
            </example>
            <example>
                <title>Pause Execution of all Policies for a Scaling Group</title>
                <para>To pause all execution of scaling policies for a
                    scaling group, submit a <command>POST</command>
                    request with the <parameter>tenantId</parameter>
                    and <parameter>groupId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting> POST /{tenantId}/groups/{groupId}/pause</programlisting>
                <para>If the <command>POST</command> request is
                    successful, a 204 response code is returned with
                    an empty response body.</para>
            </example>
            <example>
                <title>Resume Execution of all Policies for a Scaling Group</title>
                <para>To resume execution of all scaling policies for
                    a scaling group, submit a <command>POST</command>
                    request with the <parameter>tenantId</parameter>
                    and <parameter>groupId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting> POST /{tenantId}/groups/{groupId}/resume</programlisting>
                <para>If the <command>POST</command> request is
                    successful, a 204 response code is returned with
                    an empty response body.</para>
               
            </example>
  
        </section>
        <section xml:id="Create_Policy">
            <title>Create Scaling Policies</title>
            <para>You can use the Autoscale API to create and manage
                the scaling policies for your scaling group. Create a
                scaling policy by submitting a <command>POST</command>
                request that contains the
                    <parameter>tenantID</parameter> that you obtained
                during the <link linkend="Authenticate"
                    >Authentication</link> step and the
                    <parameter>groupID</parameter> that you obtained
                during the <link linkend="Create_Group">Create and
                    Manage a Scaling Group</link> step. </para>
            <para> You can specify multiple policies to manage your
                    <link linkend="Create_Group">scaling group</link>. </para>
            <para>
                <note>
                    <para> Executing a scaling policy always returns a
                            <code>202 Accepted</code> status. This
                        status indicates that the scaling policy was
                        executed but does not indicate whether the
                        execution successfully caused the scaling
                        group to scale. If some element of the
                        configuration is invalid, scaling can fail
                        even if the scaling policy is executed. </para>
                </note>
            </para>
            <example>
                <title>Creating a Scaling Policy</title>
                <para>To create a scaling policy, submit a POST
                    request with the <parameter>tenantId</parameter>
                    and <parameter>groupId</parameter> parameters
                    specified in the request URL. The following
                    example shows how to create a policy that scales
                    the group up by one server with a cooldown phase
                    of 150 seconds and a scaling policy that scales
                    the group down by 5.5 percent with a cooldown
                    phase of 6 seconds.</para>
                <programlisting>
POST https://autoscale.api.rackspacecloud.com/v1.0/{tenantID}/groups/{groupID}/policies/
                </programlisting>
                <programlisting language="json">
<xi:include href="./samples/reqCreatePolicies.json" parse="text"/>
</programlisting>
                <para>If the <command>POST</command> request is
                    successful, an array of scaling policies is
                    provided in the request body in JSON format, as
                    shown in the following example.</para>
                <programlisting language="json">
<xi:include href="./samples/resCreatePolicies.json" parse="text"/>
</programlisting>     
            </example>
            <example>
                <title>Obtaining a List of Scaling Policies</title>
                <para>To obtain a list of scaling policies for a
                    scaling group, submit a <command>GET</command>
                    request with the <parameter>tenantId</parameter>
                    and <parameter>groupId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting>
GET /{tenantId}/groups/{groupId}/policies
                </programlisting>
                <para>If the <command>GET</command> request is
                    successful, the response data will be returned in
                    JSON format as shown in the following
                    example:</para>
                <programlisting language="json">
<xi:include href="./samples/resGetPolicies.json" parse="text"/>
</programlisting>
            </example>
            <example>
                <title>Getting an Individual Scaling Policy</title>
                <para>To obtain information about an individual
                    scaling policy, including policy id, name, type,
                    adjustment, and cooldown, submit a
                        <command>GET</command> request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter> and
                        <parameter>policyId</parameter> parameters
                    specified in the request URL. </para>
                <programlisting>
GET /{tenantId}/groups/{groupId}/policies/{policyId}
                </programlisting>
                <para>If the <command>GET</command> request is
                    successful, the data will be returned in the
                    response body in JSON format as shown in the
                    following example:</para>
                <programlisting language="json">
<xi:include href="./samples/resGetPolicy.json" parse="text"/>
</programlisting>
            </example>
            <example>
                <title>Updating a Scaling Policy</title>
                <para>To update a scaling policy, submit a
                        <command>PUT</command> request, with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter> and
                        <parameter>policyId</parameter> parameters
                    specified in the request URL. In the request body
                    provide a name for the policy, a change value, and
                    a value for the cooldown and a method for
                    triggering the policy, for example a webhook. In
                    the following example, the configuration is scaled
                    up by 1 server with a cooldown phase of 1800
                    seconds. </para>
                <programlisting>
PUT /{tenantId}/groups/{groupId}/policies/{policyId}
</programlisting>
<programlisting language="json">
<xi:include href="./samples/reqPutPolicy.json" parse="text"/>
</programlisting>    
                <para>If the <command>PUT</command> request is
                    successful, a 204 response code with an empty
                    response body will be returned. </para>
            </example>
            <example>
                <title>Deleting a Scaling Policy</title>
                <para>To delete a scaling policy, submit a
                        <command>DELETE</command> request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter> and
                        <parameter>policyId</parameter> parameters
                    specified in the request URL. </para>
                <programlisting>
DELETE /{tenantId}/groups/{groupId}/policies/{policyId}
                </programlisting>
                <para>If the <command>DELETE</command> request is
                    successful, a 204 response code with an empty
                    response body will be returned. </para>
            </example>
        </section>
        <section xml:id="Create_Webhooks">
            <title>Create and Manage Webhooks</title>
            <para>After creating your policy, you need to specify a
                webhook to tie your <link linkend="Create_Policy"
                    >scaling policy</link> to events. Webhooks are
                URLs that can activate the policy without
                authentication. When a webhook is set, a
                pre-configured event, such as an alarm set through
                Cloud Monitoring, causes an HTTP POST callback request
                to be sent to a configured URI. </para>
            <example>
                <title>Creating a Scaling Webhook: Request</title>
                <para>To create a webhook, submit a
                        <command>POST</command> request with the
                        <parameter>tenantID</parameter>,
                        <parameter>groupID</parameter>, and
                        <parameter>policyID</parameter> specified in
                    the request URL. In the request body, specify the
                    name of the webhook, as well as any metadata for
                    the webhook. The following example shows how to
                    create a webhook for a scaling policy.</para>
                <programlisting>
POST https://autoscale.api.rackspacecloud.com/v1.0/{tenantID}/groups/{groupID}/policies/{policyID}/webhooks
                </programlisting>
                <programlisting language="json">
<xi:include href="./samples/reqCreateWebhook.json" parse="text"/>
</programlisting>
            <para>If the <command>POST</command> request is
                    successful, the data will be returned in JSON
                    format as shown in the following example:</para>
                <programlisting language="json">
<xi:include href="./samples/resCreateWebhook.json" parse="text"/>
</programlisting>
            </example>
            <example>
                <title>Get a List of all Scaling Webhooks and their Ids</title>
                <para>To obtain a list of all scaling webhooks and
                    their corresponding ids, submit a
                        <command>GET</command> request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter> and
                        <parameter>policyId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting>
GET /{tenantId}/groups/{groupId}/policies/{policyId}/webhooks
                </programlisting>
                <para>If the <command>GET</command> request is
                    successful, the data will be returned in the
                    response body in JSON format as shown in the
                    following example:</para>
                <programlisting language="json">
<xi:include href="./samples/resGetWebhooks.json" parse="text"/>
</programlisting>
            </example>
            <example>
                <title>Update a Scaling Webhook</title>
                <para>To modify a scaling webhook, submit a
                        <command>PUT</command> request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter>,
                        <parameter>policyId</parameter> and
                        <parameter>webhookId</parameter> parameters
                    specified in the request URL. In the request body,
                    specify a name and metadata for the webhook as
                    shown in the following example.</para>
                <programlisting>
PUT /{tenantId}/groups/{groupId}/policies/{policyId}/webhooks/{webhookId}
                </programlisting>
                <programlisting language="json"><xi:include href="./samples/reqPutWebhook.json" parse="text"/></programlisting>
                <para>If the <command>PUT</command> request is
                    successful, a 204 response code with an empty
                    response body will be returned.</para>
            </example>
            <example>
                <title>Get Information about a Specific Webhook</title>
                <para>To obtain details about a specific webhook,
                    submit a <command>GET</command> request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter>,
                        <parameter>policyId</parameter> and
                        <parameter>webhookId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting>
GET /{tenantId}/groups/{groupId}/policies/{policyId}/webhooks/{webhookId}
                </programlisting>
                <para>If the <command>GET</command> request is
                    successful, the data will be returned in JSON
                    format as shown in the following example:</para>
                <programlisting language="json">
<xi:include href="./samples/resGetWebhook.json" parse="text"/>
</programlisting>
            </example>
            <example>
                <title>Delete a Scaling Webhook</title>
                <para>To delete a scaling policy webhook, submit a
                        <command>DELETE</command> request with the
                        <parameter>tenantID</parameter>,
                        <parameter>groupID</parameter>,
                        <parameter>policyID</parameter>, and the
                        <parameter>webhookID</parameter> parameters
                    specified in the request URL.</para>
                <programlisting>
DELETE /{tenantId}/groups/{groupId}/policies/{policyId}/webhooks/{webhookId}
                </programlisting>
                <para>If the <command>DELETE</command> request is
                    successful, a 204 response code with an empty
                    response body will be returned. </para>
            </example>
        </section>
        <section xml:id="Execute_Policy">
            <title>Execute a Scaling Policy</title>
            <para> After you define a <link linkend="Create_Policy"
                    >policy</link>, you can activate that policy by
                issuing a <command>POST</command> request against its
                URL. </para>
            <example>
                <title>Activating a Scaling Policy</title>
                <para>To activate a <link linkend="Create_Policy"
                        >scaling policy</link>, submit a
                        <command>POST</command> request with the
                        <parameter>tenantId</parameter>,
                        <parameter>groupId</parameter> and
                        <parameter>policyId</parameter> parameters
                    specified in the request URL.</para>
                <programlisting>
 POST /{tenantId}/groups/{groupId}/policies/{policyId}/execute 
                </programlisting>
            </example>
            <para> The <command>POST</command> request causes the
                    <link linkend="Create_Policy">scaling
                    policy</link> to execute, which causes the <link
                    linkend="Create_Group">scaling group</link> to
                transform if it is able to do so. </para>
            <para> Execution of a scaling policy always returns a
                    <code>202 Accepted</code> status. This status
                indicates that the scaling policy was executed but
                does not indicate whether the execution successfully
                caused the scaling group to scale. If some element of
                the configuration is invalid, scaling can fail even if
                the scaling policy is executed. </para>
        </section>
        <section xml:id="Delete_Group">
            <title>Delete a Scaling Group</title>
            <para>You can use the Auto Scale API to deactivate and
                delete one or more scaling groups. Your options for
                deleting the scaling group depend on whether your
                scaling group has active entities or not.</para>   
            <para>
                <note>
                    <para>You cannot delete a scaling group when it
                        has active entities associated with it.</para>
                </note>
            </para>
            <para>When a group contains no servers, you can eliminate
                the group by sending a <command>DELETE</command>
                request to its group ID. </para>
            <para>The following three options are possible for
                deleting a scaling group:</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>If there are no active entities in your
                            configuration, use the <command>DELETE</command> request to
                            delete the scaling group.</para>
                    </listitem>
                    <listitem>
                        <para>If there are active entities in your
                            configuration, update your scaling group
                            configuration by submitting a
                                <command>PUT</command> request and
                            setting the
                                <parameter>minEntities</parameter> and
                                <parameter>maxEntities</parameter>
                            parameters to 0. </para>
                    </listitem>
                    <listitem>
                        <para>Force the deletion of your group by
                            submitting a <command>DELETE</command>
                            request and setting the
                                <parameter>force</parameter> parameter
                            to true.</para>
                    </listitem>
                </orderedlist>
            </para>
            <example>
                <title>Delete a Scaling Group with no Active
                    Entities</title>
                <para>To delete a scaling policy group that has no
                    active entities, submit a
                        <command>DELETE</command> request with the
                        <parameter>tenantID</parameter> and
                        <parameter>groupID</parameter> parameters
                    specified in the request URL as shown in the
                    following example: </para>
                <programlisting language="json"><xi:include href="./samples/reqDeleteGroup.json" parse="text"/></programlisting>
                <para>If the <command>DELETE</command> request is
                    successful, a 204 response code with no response
                    body will be returned. If the request fails, a 403
                    response code will be returned with a message
                    stating that your group still has active entities
                    as shown in the following example:</para>
                <programlisting>
"Group d5f5f3ad-faef-4c8f-99c4-0e931189c521 for tenant 829409 still has entities."
                </programlisting>
            </example>
            <example>
                <title>Delete a Scaling Group with Active
                    Entities<?sbr?><?sbr?></title>
                <para>If you have submitted a
                        <command>DELETE</command> request and received
                    a response saying that your group still has active
                    entities, go through the following steps:</para>
                <para>
                    <orderedlist>
                        <listitem>
                            <para>Update the scaling group
                                configuration by submitting a
                                   <command>PUT</command> request that
                                sets the
                                   <parameter>minEntities</parameter>
                                and <parameter>maxEntities</parameter>
                                parameters to 0 as shown in the
                                following example:</para>
                      
                <programlisting>
PUT /{tenantId}/groups/{groupId}/config
                </programlisting>
                <programlisting language="json">
<xi:include href="./samples/reqPutGroupConfig-size0.json" parse="text"/>
</programlisting>
                        </listitem>
                <listitem><para>Submit a <command>DELETE</command> request with the
                                   <parameter>tenantId</parameter> and
                                   <parameter>groupId</parameter>
                                parameters specified in the request
                                URL: </para>  
            <programlisting>
DELETE /{tenantId}/groups/{groupId}
            </programlisting>
                </listitem></orderedlist></para>
                <para>If the <command>DELETE</command> request is
                    successful, a 204 response code with an empty
                    response body will be returned.</para>
            </example>   
            <example><title>Delete a Scaling Group using Force Delete</title>
                <para>The Auto Scale API provides an option for users
                    to force delete a scaling group that has active
                    servers. The Force Delete option will remove all
                    servers in the configuration from the load
                    balancer(s) and then delete the server. </para>
                <para>
                    <warning>
                        <para>Using Force Delete will remove all
                            servers that are associated with the
                            scaling group immediately. Users are
                            discouraged from using the Force Delete
                            option and to manually delete servers
                            instead.</para>
                    </warning>
                </para>
                <para>To use the Force Delete option, submit a
                        <command>DELETE</command> request with the
                        <parameter>tenantId</parameter> and
                        <parameter>groupId</parameter> parameters
                    specified in the request URL, and set the
                        <parameter>force</parameter> parameter to
                        <parameter>true</parameter>. </para>
                <programlisting>
DELETE /{tenantId}/groups/{groupId}?force=true
            </programlisting>
                <para>Upon successful submission of this request the
                        <parameter>minEntities</parameter> and
                        <parameter>maxEntities</parameter> parameters
                    will automatically be set to 0 and the deletion of
                    the group will begin. If the
                        <command>DELETE</command> request is
                    successful, a 204 response code with an empty
                    response body will be returned.</para></example>
        </section>
    </chapter>
    <chapter xml:id="F_A_Q">
        <title>Frequently Asked Questions</title>
        <para>Q: How much does the Rackspace Auto Scale service cost? </para>
        <para>A: Autoscale is a free service for Cloud Monitoring
            customers.</para>
        <para>Q: How do I know that I'm being billed for Auto Scale
            events? </para>
        <para>A: Autoscale will feature an advanced Audit Log that
            tracks when Rackspace takes actions on a user's behalf. </para>
        <para>Q: Can I use Auto Scale across data centers? </para>
        <para>A: No, you will need to create separate scaling groups
            for different data centers. The policies for these scaling
            groups can be triggered across data centers. </para>
        <para>Q: How does Auto Scale moderate conflicting events? </para>
        <para>A: Cooldown timers are built into the Scaling Group and
            the individual scaling policies, so that the user can
            prevent too many servers from being created or deleted too
            quickly.</para>
        <para>Q: Can I suspend servers and restore them quickly to the
            same IP address? </para>
        <para>A: Auto Scale will not suspend and restore servers to
            the same IP address. Servers will be restored to a
            different IP address.</para>
        <para>Q: Can I scale up servers in a particular order? (i.e.
            spinning up a DB server before a web server) </para>
        <para>A: Auto Scale will not handle scaling up servers,
            databases, load balancers, etc... in a particular order.
            This will be handled by Checkmate and Workflow.</para>
        <para>Q: Will Auto Scale integrate with image services or
            other automation services, such as Chef or Puppet?</para>
        <para>A: Auto Scale is service-agnostic and API based, so it
            will work well with these services but will not explicitly
            integrate with them.</para>
        <para>Q: When a server is automatically created it is attached
            to a load balancer. Is it possible to bring up a server(s)
            that is not attached to a load balancer? </para>
        <para>A: Yes, you do not require a load balancer as part of
            the launch configuration, but you will have to configure
            how your servers get requests. </para>
        <para>Q: Multiple scaling policies can be associated to the
            same scaling group. How is the "correct" policy selected
            when servers are generated? </para>
        <para>A: The "handle" for each policy is defined by a
            construct called "webhook" which is a URL endpoint you
            need to call to invoke the policy execution.</para>
        <para>Q: What is the minimum amount of time you can set a cool
            down for? </para>
        <para>A: 5 minutes. </para>
        <para>Q: What is the maximum limit you can set a cool down
            for? </para>
        <para>A: There is no maximum cool down limit. </para>
        <para>Q: What is a "group"? </para>
        <para>A: It is a construct that contains the configuration for
            spinning up of individual servers and has one or more
            associated policies which describe what actions to take
            when the policy is activated.</para>
        <para>Q: Do the servers that I'm going to automatically scale
            up have to be associated with a group? If so, why? </para>
        <para>A: Yes. A scaling policy is associated with a specific
            group and we want to "manage" all the scaled up servers
            for health and monitoring in aggregate so they need to be
            a part of the group. </para>
        <para>Q: The number of servers that can be scaled up with a
            group is limited to 25. How can I auto-scale beyond 25
            servers? </para>
        <para>A: That limitation is for a load balancer. If you need
            to scale beyond 25 servers, add more than one scaling
            group, each associated with a load balancer and if needed
            create a pyramid of load balancers. </para>
        <para>Q: Can I create an autoscale group with no servers in
            it? </para>
        <para>A: Right now, you need at least one server in the
            scaling group. This is a requirement of the load balancer. </para>
        <para>Q: Are monitoring rules for the entire cluster or can
            you specify specific servers in the cluster? </para>
        <para>A: The checks and alarms will be written and specified
            within the launch configuration and then submitted to the
            newly created entities. There are no specific rules for
            specific servers. </para>
        <para>Q: Will we drain connections on a node behind a load
            balancer as a service (LBaaS) before removing it from a
            pool? </para>
        <para>A: We remove the server from the load balancer before we
            send the delete command. At present, we do not drain
            connections. But we are working on this. </para>
        <para>Q: Will we use the default threshold set by monitoring
            as a service (MaaS) for each check to trigger a scale up? </para>
        <para>A: This threshold will be defined with the alerting
            language in MaaS.</para>
        <para>Q: Will we be recording the history of a scale for a
            customer? </para>
        <para>A: There will be an audit log that shows scaling
            history, triggers, and user changes. </para>
        <para>Q: Will there be an easy path for customers to come from
            other autoscaling products such as Rightscale? </para>
        <para>A: We won't be able to migrate a users configurations
            from other providers. </para>
    </chapter>
</book>
