<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section [
<!-- in PDF: for line 1 on the cover page -->
<!ENTITY PRODNAME "Rackspace Auto Scale"> 
<!-- in PDF: for page headers -->
<!ENTITY PRODABBV "Rackspace Auto Scale"> 
<!-- in body -->
<!ENTITY PROD "Auto Scale">               
]>
<chapter xml:id="Auto_Scale_Core_Concepts"
    xmlns="http://docbook.org/ns/docbook"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <title>Auto Scale concepts</title>
    <para>To use the &PROD; API effectively, you should understand
        several key concepts, discussed in this chapter. </para>

       <section xml:id="How_Auto_Scale_Works">
            <title>How Auto Scale works</title>
            <para>Rackspace &PROD; is an API-based tool that automatically scales resources in response to
                an increase or decrease in overall workload based on user-defined thresholds.</para>
           <para>Auto Scale is written in python and calls the Rackspace Cloud Servers, Rackspace Cloud Load Balancers, and 
               Rackspace RackConnect V3 APIs. All Rackspace Cloud Server create server configuration parameters can be used with Auto Scale. 
               For more information, see <link xlink:href="http://docs.rackspace.com/">Rackspace Cloud Servers documentation</link>. 
               For technical details, see the <link xlink:href="https://github.com/rackerlabs/otter/tree/master/doc">public Auto Scale github documentation</link>  
               and the <link xlink:href="https://github.com/rackerlabs/otter/wiki">public Auto Scale github Wiki</link>.</para>
            <para>&PROD; functions by linking these services:
                <itemizedlist>
                    <listitem>
                        <para>Rackspace Cloud Servers. Learn more at 
                            <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/overview.html">Cloud Servers Getting Started guide</link></para>
                    </listitem>
                    <listitem>
                        <para>Load-balanced Cloud Servers. Learn more at
                            <link xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-getting-started/content/DB_Doc_Change_History.html">Load Balancers Getting Started guide
                            </link>.</para>
                    </listitem>
                </itemizedlist>
                You can set up a schedule for launching Auto Scale or define an event that triggers a
                webhook. You can also specify a minimum and maximum number of cloud servers for your
                scaling group, the amount of resources you want to increase or decrease, and policies
                based on percentage or real numbers.</para>
            <para>
                <note>
                    <para>&PROD; does not configure any information within a server. You must configure your
                        services to function when each server is started. We recommend automating your
                        servers' startup processes with
                        <link xlink:href="http://www.opscode.com/chef/">Chef</link> or a similar tool.</para>
                </note>
            </para>
            <para>
                <note>
                    <para>&PROD; can utilize all Rackspace Cloud Server create server API parameters. For more details, 
                        see the 
                        <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/CreateServers.html">
                            Create servers</link> documentation.</para>
                </note>
            </para>
        </section>
        <section xml:id="Scaling_groups"
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <title>Scaling groups</title>
            <para>The scaling group is at the heart of an Auto Scale
                deployment. The scaling group specifies the basic
                elements of the Auto Scale configuration. It manages
                how many servers can participate in the scaling group.
                It also specifies information related to load
                balancers if your configuration uses a load
                balancer.</para>
            <para>When you create a scaling group, you specify the
                details for group configurations (scaling group settings) and launch configurations (how new servers are added).</para>
            <itemizedlist>
                <listitem>
                    <para>Group Configuration</para>
                </listitem>
                <listitem>
                    <para>Launch Configuration</para>
                </listitem>
            </itemizedlist>
            <para>The following table provides a description of both
                configuration types.</para>
            <para>
                <table>
                    <caption>Scaling Group Configurations</caption>
                    <col width="20%"/>
                    <col width="60%"/>
                    <thead>
                        <tr>
                            <td>Configuration</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>Group Configuration</td>
                            <td>Outlines the basic elements of the
                                Auto Scale configuration. The group
                                configuration manages how many servers
                                can participate in the scaling group.
                                It sets a minimum and maximum limit
                                for the number of entities that can be
                                used in the scaling process. It also
                                specifies information related to load
                                balancers. </td>
                        </tr>
                        <tr>
                            <td>Launch Configuration</td>
                            <td>Creates a blueprint for how new
                                servers will be created. The launch
                                configuration specifies what type of
                                server image will be started on
                                launch, what flavor the new server is,
                                and which cloud load balancer or
                                RackConnect v3 load balancer pool the
                                new server connects to.
                                Note: The <parameter>launchConfiguration</parameter> uses the <emphasis role="bold">admin</emphasis> user to scale up, 
                                usually the first admin user found on the tenant. Only that particular admin user's SSH key pair names can be used in the launchConfiguration. 
                                Note: The launchConfiguration update operation overwrites all launchConfiguration settings.
                                </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            
        </section>
            <section xml:id="Launch_Configuration">
            <title>Launch configurations</title>
            <para>The launch configuration manages the process of
                creating new servers. It specifies what type of server
                image will be started on launch, what flavor the new
                server is, and which cloud load balancer or
                RackConnect v3 load balancer pool the new server
                connects to.</para>
            <note>
                <itemizedlist>
                    <listitem><para>
                        The <parameter>launchConfiguration</parameter> uses the <emphasis role="bold">admin</emphasis> user to scale up, 
                        usually the first admin user found on the tenant. Only that particular admin user's SSH key pair names can be used in the launchConfiguration, 
                        if a key name is specified at all. If there are multiple <emphasis role="bold">admin</emphasis> accounts in the tenant, there is no 
                        guarantee as to which one will be chosen, so it is best for there to be one <emphasis role="bold">admin</emphasis> user in the tenant.  
                    </para></listitem>
                    <listitem>
                        <para>The launchConfiguration update operation overwrites all launchConfiguration settings. 
                            Any parameters NOT specified in the update, are reset to null or default.</para>
                    </listitem>
                </itemizedlist>
            </note>
            <para>The <parameter>launchConfiguration</parameter>
                parameter specifies the following items:</para>
            <para>
                <table>
                    <caption>launchConfiguration</caption>
                    <col width="20%"/>
                    <col width="60%"/>
                    <thead>
                        <tr>
                            <td>Parameter</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <parameter>type</parameter>
                            </td>
                            <td>Set to <parameter>launch_server</parameter>.</td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>args</parameter>
                            </td>
                            <td>Specifies the item to be configured.
                                Must be 
                                <parameter>server</parameter>
                                and also
                                   <parameter>loadBalancers</parameter>.
                                Most launch configurations have both a
                                server and a load balancer (can be
                                RackConnect v3) configured.</td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>The following table shows the values that can be
                configured for the <parameter>args</parameter> parameter:</para>
            <para>
                <table rules="all">
                    <?sbr?>
                    <caption>args Parameters</caption>
                    <col width="20%"/>
                    <col width="60%"/>
                    <thead>
                        <tr>
                            <td>Parameter</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <parameter>server</parameter>
                            </td>
                            <td>Specifies configuration information
                                for the Cloud server image that will
                                be created during the scaling process. If you are using Boot From Volume, 
                                the <parameter>server</parameter> args are where you specify your create server template. </td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>loadbalancers</parameter>
                            </td>
                            <td>Specifies the configuration
                                information for the load balancer(s)
                                used in the cloud server deployment,
                                including a RackConnect v3 load
                                balancer pool. For background
                                information and an example
                                configuration, see <link
                                   linkend="RCv3">Cloud Bursting with
                                   RackConnect v3</link>. Please note
                                that you must include the
                                   <parameter>ServiceNet</parameter>
                                network in your configuration if you
                                use a load balancer so the load
                                balancer can retrieve the IP address
                                of new servers. </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>The <parameter>server</parameter> group parameter specifies details about the server as described in the
                following table. Note the <parameter>server</parameter> arguments are directly passed to nova when creating a server.</para>
            <para>For more information see 
                <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/nova_create_server.html">Create Your Server with the nova Client</link></para>
            <para>
                <table rules="all">
                    <caption>server Parameters</caption>
                    <col width="20%"/>
                    <col width="60%"/>
                    <thead>
                        <tr>
                            <td>Parameter</td>
                            <td>Description</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <parameter>name</parameter>
                            </td>
                            <td>Specifies a prefix to the name for
                                created servers. The name of new
                                servers will be automatically
                                generated using the following formula:
                                [serverName]-AS[uniqueHash], and will
                                look similar to the following:
                                [serverName]-AS12fabe. The name of new
                                servers may be truncated to fit within
                                the limit of 255 characters. </td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>flavorRef</parameter>
                            </td>
                            <td>Specifies the flavor ID for the
                                server. A flavor is a resource
                                configuration for a server. For more
                                information on available flavors, see
                                   <olink targetdoc="autoscale-devguide" targetptr="server-flavors">“Server Flavors” </olink>. Example:
                                performance1-4.</td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>imageRef</parameter>
                            </td>
                            <td>Specifies the ID of the Cloud Server
                                image to start. Example:
                                0d589460-f177-4b0f-81c1-8ab8903ac7d8.</td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>OS-DCF:diskConfig</parameter>
                            </td>
                            <td>Specifies how the disk on new servers
                                is partitioned. Valid values are
                                <parameter>AUTO</parameter>" or <parameter>MANUAL</parameter>. For non-Rackspace
                                server images, this value must always be
                                <parameter>MANUAL</parameter>. A non-Rackspace server
                                image would be one that you imported using a non-Rackspace server. For more information, see the
                                   <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/diskconfig_attribute.html">
                                       Disk Configuration Extension
                                </link>documentation for Rackspace
                                Cloud Servers.</td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>metadata</parameter>
                            </td>
                            <td>Optional. The maximum size of the
                                metadata key and value is 255 bytes
                                each. For more information, see the
                                   <link
                                   xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/Server_Metadata-d1e2529.html"
                                   > Server Metadata</link>
                                documentation for Rackspace Cloud
                                Servers. You use this attribute to
                                configure RackConnect v2 with Auto
                                Scale, for details, see <link
                                   xlink:href="http://www.rackspace.com/knowledge_center/article/cloud-bursting-using-auto-scale-rackconnect-and-f5-load-balancers"
                                   > Cloud Bursting Using Auto Scale,
                                   RackConnect, and F5 Load
                                   Balancers.</link> You do NOT use
                                this parameter to configure Auto Scale
                                and RackConnect v3, you use the
                                   <parameter>loadBalancers</parameter>
                                parameter for that.</td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>networks</parameter>
                            </td>
                            <td>Specifies the networks to which you
                                want to attach the server. This
                                attribute enables you to attach to an
                                isolated network for your tenant ID,
                                the public Internet, and the private
                                ServiceNet. <?sbr?>If you do not
                                specify any networks, your server is
                                attached to the public Internet and
                                private ServiceNet. The UUID for the
                                private ServiceNet is 11111111-1111-1111-1111-111111111111.
                                The UUID for the public Internet is 00000000-0000-0000-0000-000000000000.</td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>personality</parameter>
                            </td>
                            <td>Specifies the file path or the content
                                that you want to inject into a server
                                image. For more information, see the
                                   <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/Server_Personality-d1e2543.html">
                                       Server Personality</link> documentation for Rackspace Cloud Servers. </td>
                        </tr>
                        <tr>
                            <td>
                                <parameter>user_data</parameter>
                            </td>
                            <td>Specifies your base64 encoded create server template you use for Boot from Volume. For more information on this parameter, see the
                                <link xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/config_drive_ext.html">
                                    Config-Drive Extension</link> section of the 
                                <citetitle>Next Generation Cloud Servers Developer Guide</citetitle>. 
                                For more information on Boot from Volume, see the developer blog 
                                <link xlink:href="https://developer.rackspace.com/blog/using-cloud-init-with-rackspace-cloud/"> Using Cloud Init with Rackspace Cloud</link></td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>This optional <parameter>loadBalancers</parameter> group parameter
                 specifies details about the load balancer as
                described in the following table:</para>
            <table rules="all">
                <caption>loadBalancers Parameters</caption>
                <col width="20%"/>
                <col width="60%"/>
                <thead>
                    <tr>
                        <td>Parameter</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <parameter>loadBalancerId</parameter>
                        </td>
                        <td>Specifies the ID of the load balancer that
                            is automatically generated when the load
                            balancer is created.</td>
                    </tr>
                    <tr>
                        <td>
                            <parameter>port</parameter>
                        </td>
                        <td> The port on which new servers will
                            receive traffic from the load balancer,
                            often port 80. </td>
                    </tr>
                </tbody>
            </table>
            <note>
                <para>You can obtain details about your load balancer
                    from the Control Panel or by using the Load
                    Balancer API. For more information, see <link
                        xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-getting-started/content/List_LB_Details.html">List Load Balancer Details</link>.</para>
            </note>
            <para>The following example shows a launch configuration
                of type "launch_server" for a cloud server and a load
                balancer: </para>
            <example>
                <title>Launch configuration example</title>
                <programlisting language="json">
                        <xi:include href="../samples/LaunchConfiguration.json" parse="text"/>
                    </programlisting>
            </example>
            <example>
                <title>Launch configuration for boot from volume </title>
                <programlisting language="json">
                            <xi:include href="../samples/LaunchConfigurationBFV.json" parse="text"/>
                        </programlisting>
            </example>
            <para>The "very long base64 encoded string"would provide your create server template.</para>
            <para>Here is an example of a very simple create server template that you could base64 encode. This template simply 
                installs the apache2 package and runs a shell command.</para>
            <example xml:id="createServerTemplate">
                <title>Create server template for RackConnect v3 </title>
                <programlisting language="json">
                            <xi:include href="../samples/exampleRCv3launchConfig.json" parse="text"/>
                        </programlisting>
            </example> 
            <tip>
                <para>To learn more about configuring cloud servers through an API, read the following: 
                    <itemizedlist>
                        <listitem>
                            <para>
                                <link
                                   xlink:href="http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/overview.html">
                                    <citetitle>Next Generation Cloud Servers Getting Started</citetitle></link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link
                                   xlink:href="http://docs.rackspace.com/servers/api/v2/cs-devguide/content/ch_api_operations.html">
                                    <citetitle>Next Generation Cloud Servers Developer Guide</citetitle></link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link
                                   xlink:href="http://docs.rcv3.apiary.io/"
                                   >RackConnect v3 API</link>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>To learn more about configuring Cloud Load
                    Balancers through an API, read the following: <itemizedlist>
                        <listitem>
                            <para>
                                <link xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-getting-started/content/DB_Overview.html">
                                    <citetitle>Rackspace Cloud Load Balancers Getting Started</citetitle></link>
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <link xlink:href="http://docs.rackspace.com/loadbalancers/api/v1.0/clb-devguide/content/API_Operations-d1e1354.html">
                                    <citetitle>Rackspace Cloud Load Balancers Developer Guide</citetitle></link>
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
            </tip>
        </section>
        <section
            xml:id="Authenticated_Webhooks_and_Anonymous_Webhooks"
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <title>Webhooks and capability URLs</title>
            <para>Auto Scale uses webhooks to initiate scaling events.
                A webhook is an industry-standard protocol for sending
                events between systems; for Auto Scale, they are used
                to execute policies. A webhook consists of an HTTP
                callback that is triggered by some user-defined event,
                such as an alarm that is set through Cloud Monitoring
                or another monitoring service. When that event occurs,
                the source site makes an HTTP request to the URI
                configured for the webhook.</para>
            <para>A webhook contains a POST call to a defined URL,
                potentially with a payload in the POST body. You can
                send webhooks with a simple call in the library that
                you are using. You can also send them manually via
                cURL:</para>
            <example>
                <title>POST request to execute a webhook</title>
                <programlisting>curl -v https://example.com/webhook -X POST -d "payload=payload"</programlisting>
            </example>
            <para>Auto Scale only supports anonymous webhooks. In
                regular webhooks, the {webhook_version}/{webhook_hash}
                is specified by URL. In anonymous webhooks, the URL is
                replaced with a hash that is known only to the issuer—
                because no authentication is needed, the webhook is
                considered "anonymous."</para>
            <para>Auto Scale uses Capability URLs in conjunction with
                webhooks. Capability URLs are URLs that give
                authorization for a certain action or event. If you
                know the URL, you have access to it and you can use
                the URL to trigger a specific event. Capability URLs
                are usually long, and random, and cannot be guessed by
                a user.</para>
            <para>When a webhook is created, Auto Scale creates values
                for the <parameter>capabilityVersion</parameter> and
                    <parameter>capabilityHash</parameter> parameters.
                These values are created per webhook, not per policy.
                When you create a webhook, you associate it with a
                policy. The response to the webhook creation request
                includes a single capability URL that is also, by
                inheritance, associated with the policy.</para>
            <para>The Auto Scale webhook architecture allows Auto
                Scale to be integrated with other systems, for
                example, monitoring systems. So, now you have this URL
                that will execute a specific policy and you can fire
                off that URL based on events happening outside of Auto
                Scale.</para>
            <para>To execute a capability URL, locate the URL in your
                webhook, and then submit a
                <command>POST</command>request against it, as shown in
                the following example:</para>
            <example>
                <title>POST request to execute a capability URL</title>
                <programlisting language="json">
                        <xi:include href="../samples/reqExecuteCapabilityURL.json" parse="text"/>
                    
                    </programlisting>
            </example>
            <para>Executing a capability URL or an anonymous webhook
                will always return a 202,
                    <parameter>Accepted</parameter>, response code,
                even if the request fails because of an invalid
                configuration. This is done to prevent information
                leakage.</para>
            <para>
                <note>
                    <para>To execute anonymous webhooks and capability
                        URLs, no authentication is needed. You can use
                        a capability URL to trigger multiple
                        webhooks.</para>
                </note>
            </para>
        </section>
        <section xml:id="Scaling_policies"
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <title>Scaling policies</title>
            <para>Auto Scale uses policies to define the scaling
                activity that will take place, as well as when and how
                that scaling activity will take place. Scaling
                policies specify how to modify the scaling group and
                its behavior. You can specify multiple policies to
                manage a scaling group.</para>
            <para>You can create two kinds of Auto Scale
                policies:</para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Policies that trigger Auto Scale activities
                        through a webhook. </para>
                </listitem>
                <listitem>
                    <para>Policies that trigger Auto Scale activities
                        based on a schedule. </para>
                </listitem>
            </itemizedlist>
            <section xml:id="Webhook_triggered_policy">
                <title>Webhook-based policies</title>
                <para>You can define a scaling policy that is invoked
                    by a webhook when a predefined event
                    occurs.</para>
                <para>
                    <note>
                        <para>The <parameter>change</parameter>,
                            <parameter>changePercent</parameter>,
                            and <parameter>desiredCapacity</parameter>
                            parameters are mutually exclusive. You can
                            only set one of them per policy.</para>
                    </note>
                </para>
                <para>To configure a webhook-based policy, you set the
                    <parameter>type</parameter>parameter to
                    "webhook" and then provide the following
                    information:</para>
                <para>
                    <table rules="all">
                        <caption>Parameters for Webhook-triggered
                            Policies </caption>
                        <col width="20%"/>
                        <col width="60%"/>
                        <thead>
                            <tr>
                                <td>Parameter</td>
                                <td>Description</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <parameter>change</parameter>
                                </td>
                                <td>Specifies the number of entities
                                    to add or remove, for example "1"
                                    implies that 1 server needs to be
                                    added. Use to change the number of
                                    servers to a specific number. If a
                                    positive number is used, servers
                                    are added; if a negative number is
                                    used, servers are removed. </td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>changePercent</parameter>
                                </td>
                                <td>Specifies the change value in per
                                    cent. Use to change the percentage
                                    of servers relative to the current
                                    number of servers. If a positive
                                    number is used, servers are added;
                                    if a negative number is used,
                                    servers are removed. The absolute
                                    change in the number of servers is
                                    always rounded up. For example, if
                                    -X% of the current number
                                    of servers translates to -0.5 or
                                    -0.25 or -0.75 servers, the actual
                                    number of servers that will be shut
                                    down is 1. </td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>desiredCapacity</parameter>
                                </td>
                                <td>Specifies the final capacity that
                                    is desired by the scale up event.
                                    Note that this value is always
                                    rounded up. Use to specify a number
                                    of servers for the policy to
                                    implement—by either adding or
                                    removing servers as needed. </td>
                            </tr>
                        </tbody>
                    </table>The webhook object takes no
                    <parameter>args</parameter>parameter.</para>
                <para>
                    <note>
                        <para>The <parameter>change</parameter>,
                            <parameter>changePercent</parameter>,
                            and
                            <parameter>desiredCapacity</parameter>parameters
                            are mutually exclusive. You can only set
                            one of them per policy. </para>
                    </note>
                </para>
            </section>
            <section xml:id="Schedule_based_Policy">
                <title>Schedule-based policies</title>
                <para>You can define a scaling policy that is invoked
                    by a preset schedule.</para>
                <para>
                    <note>
                        <para>The <parameter>change</parameter>,
                            <parameter>changePercent</parameter>,
                            and <parameter>desiredCapacity</parameter>
                            parameters are mutually exclusive. You can
                            only set one of them per policy.</para>
                    </note>
                </para>
                <para>To configure a schedule-based policy, set the
                    <parameter>type</parameter>parameter to
                    "schedule" and then provide the following
                    information:</para>
                <para>
                    <table>
                        <caption>Parameters for Scheduled-based
                            Policies </caption>
                        <col width="205"/>
                        <col width="60%"/>
                        <thead>
                            <tr>
                                <td>Parameter</td>
                                <td>Description</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>
                                    <parameter>change</parameter>
                                </td>
                                <td>Specifies the number of entities
                                    to add or remove, for example "1"
                                    implies that 1 server needs to be
                                    added. Use to change the number of
                                    servers to a specific number. If a
                                    positive number is used, servers
                                    are added; if a negative number is
                                    used, servers are removed.</td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>changePercent</parameter>
                                </td>
                                <td>Specifies the change value, in
                                    incremental stages or per cent. Use
                                    to change the percentage of servers
                                    relative to the current number of
                                    servers. If a positive number is
                                    used, servers are added; if a
                                    negative number is used, servers
                                    are removed. The absolute change in
                                    the number of servers is always
                                    rounded up. For example, if -X% of
                                    the current number of servers
                                    translates to -0.5 or -0.25 or
                                    -0.75 servers, the actual number of
                                    servers that will be shut down is
                                    1. </td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>desiredCapacity</parameter>
                                </td>
                                <td>Specifies final capacity that is
                                    desired by the scale up event. Use
                                    to specify a number of servers for
                                    the policy to implement—by either
                                    adding or removing servers as
                                    needed. </td>
                            </tr>
                            <tr>
                                <td>
                                    <parameter>args</parameter>
                                </td>
                                <td>Provide information related to the
                                    time when the policy is supposed to
                                    be invoked.</td>
                            </tr>
                        </tbody>
                    </table>
                </para>
                <para>For example to use Cron, a time-based job
                    scheduler, you specify the time when the policy is
                    invoked in CRON format, as shown in the following
                    example, which configures the policy to be invoked
                    at 6 AM every day: <example>
                        <title>Schedule-based policy using
                            cron</title>
                        <programlisting language="json">
                                <xi:include href="../samples/Cronstylescheduler.json" parse="text"/>
                            </programlisting>
                    </example>
                </para>
                <para>To set the time at which the policy will be
                    invoked directly, without Cron, use the "at"
                    argument and specify the time using the format
                    that is shown in the following example: <example>
                        <title>Schedule-based policy specifying direct
                            time</title>
                        <programlisting language="json">
                                <xi:include href="../samples/Atstylescheduler.json" parse="text"/>
                            </programlisting>
                    </example>
                </para>
            </section>
            <section xml:id="Scale_by_percentage">
                <title>Scaling by percentage</title>
                <para>You can define a policy that scales your server
                    resources up and down by a predefined percentage.
                    For example, you can define a policy to increase
                    your resources by 20% if a certain predefined
                    event occurs.</para>
                <para>The following diagram outlines how scaling by
                    percentage works.</para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata
                                fileref="../images/ScalebyPercentage.png" contentwidth="6in"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </section>
            <section xml:id="Min_and_Max_Policies">
                <title>Using the min and max values with policies </title>
                <para>When setting up your scaling groups, you
                    configure the minimum and maximum number of
                    resources that are allowed. These values are
                    specified in the
                    <parameter>minEntities</parameter>and
                    <parameter>maxEntities</parameter>parameters
                    under group configuration, and are invoked
                    whenever you update your group
                    configuration.</para>
                <para>
                    <important>
                        <para>If the number of resources that is
                            specified in a policy differs from the
                            amount that is specified under group
                            configuration, the preconfigured values
                            take precedence. </para>
                    </important>
                </para>
                <para>The following diagram illustrates how the min
                    and max values work in a scaling scenario.</para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata fileref="../images/Minandmax.png" contentwidth="6in"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </section>
            <section xml:id="Deleting_resources">
                <title>Deleting resources <?sbr?>
                </title>
                <para>You can set a policy to specify when you want
                    some of your resources deleted, and how many
                    resources should be deleted.</para>
                <para>When deleting servers, Auto Scale follows these
                    rules: </para>
                <para>
                    <itemizedlist>
                        <listitem>
                            <para>If no new servers are in the process
                                of being built, the oldest servers are
                                deleted first.</para>
                        </listitem>
                        <listitem>
                            <para>If new servers are in the process of
                                being built and in a "pending" state,
                                these servers are deleted first.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>The following diagram illustrates how the
                    deletion process works.</para>
                <informalfigure>
                    <mediaobject>
                        <imageobject>
                            <imagedata
                                fileref="../images/DeletePolicy.png" contentwidth="6in"/>
                        </imageobject>
                    </mediaobject>
                </informalfigure>
            </section>
        </section>
        <section xml:id="Cooldowns"
            xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <title>Cooldowns</title>
            <para>Auto Scale supports a cooldown feature. A cooldown
                is a configured period of time that must pass between
                actions. Cooldowns only apply to webhook-based
                configurations. By configuring group cooldowns, you
                control how often a group can have a policy applied,
                which can help servers scaling up to complete the
                scale up before another policy is executed. By
                configuring policy cooldowns, you control how often a
                policy can be executed, which can help provide quick
                scale-ups and gradual scale-downs.</para>
            <para>Cooldowns work the following way: <itemizedlist>
                    <listitem>
                        <para>Group cooldowns control how often a
                            group can be modified by denying all
                            policy executions until the cooldown
                            expires—even if conditions exist that
                            would trigger one.</para>
                    </listitem>
                    <listitem>
                        <para>Policy cooldowns control how often a
                            single, specific policy can be executed.
                            For example, a policy cooldown can require
                            at least six hours until any successive
                            scale down policies are
                            reactivated.</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <note>
                    <para>Cooldown configuration is irrelevant for
                        schedule-based configurations and the Group
                        Cooldown and Policy Cooldown can both be set
                        to 0 (null).</para>
                </note>
            </para>
        </section>
        <section xml:id="Schedule_Based_Configuration">
            <title>Schedule-based configurations</title>
            <para>You can configure Auto Scale to be triggered based on a user-defined schedule that is
                specified in one or more policies.</para>
            <para>This configuration option is helpful if you know that your Cloud Servers deployment will
                need additional resources during certain peak times. For example, if you need additional
                server resources during the weekend, you can define a policy that adds 50 servers
                on Friday evening and then removes these servers again on Sunday evening to return
                to a regular operational state.</para>
            <para>The following diagram outlines how Scaling by Schedule works:</para>
            <informalfigure>
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="../images/ScalebySchedule.png" contentwidth="6in" />
                    </imageobject>
                </mediaobject>
            </informalfigure>
        </section>
        <section xml:id="Monitoring_Based_Configuration" security="writeonly">
            <title>Monitoring-based configurations</title>
            <para>You can configure Auto Scale to be triggered based on a predefined alarm or threshold
                that has been previously set up in Cloud Monitoring.</para>
            <para>Monitoring-based configuration works the following way:</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>In Cloud Monitoring, you configure alarms that are triggered when a high
                            utilization of resources occurs.
                        </para>
                    </listitem>
                    <listitem>
                        <para>When Cloud Monitoring sets off an alarm for high utilization of resources
                            within a group, a webhook is triggered.</para>
                    </listitem>
                    <listitem>
                        <para>The webhook launches the Rackspace Auto Scale service, which looks up the
                            policy that has been defined in accordance with the webhook. This policy
                            determines the amount of cloud servers that need to be added or removed
                            in case the alarm is triggered.</para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
        <section xml:id="webhook_based_configuration">
            <title>Event-based configurations</title>
            <para>You can configure Auto Scale to be triggered through a webhook, based on a predefined
                alarm or threshold that has been previously set up in a monitoring service. Event-based
                configuration works the following way:</para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>In your monitoring service, you configure alarms that are triggered when
                            a high utilization of resources occurs
                        </para>
                    </listitem>
                    <listitem>
                        <para>In Auto Scale, you configure a scaling group, scaling policies, and a webhook
                            to be triggered when your monitoring service sets off an alarm for high
                            utilization of resources.
                        </para>
                    </listitem>
                    <listitem>
                        <para>The webhook launches the Auto Scale service, which looks up the policy that
                            has been defined in accordance with the webhook. This policy determines
                            the amount of cloud servers that need to be added or removed.
                        </para>
                    </listitem>
                </orderedlist>
            </para>
            <note>
                <para>Servers added through a webhook triggered by an external monitoring service will
                    not be automatically monitored by the external monitoring service.</para>
            </note>
        </section>
        <section xml:id="RCv3" xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <title>Cloud bursting with RackConnect v3</title>
            <para>You can use Auto Scale with a hybrid, dedicated and
                cloud, solution to "burst" into the cloud when extra
                servers are temporarily needed. To do this, you use
                RackConnect v3, a Rackspace solution that works with
                Rackspace cloud servers and creates a secure bridge
                between the Rackspace cloud and your dedicated
                hardware.</para>
            <para>To get started with RackConnect v3 cloud bursting: <itemizedlist>
                    <listitem>
                        <para>Contact your Rackspace Support team and
                            tell them what you want to do. They will
                            configure a load balancer pool for you and
                            give you the UUID. </para>
                    </listitem>
                    <listitem>
                        <para>Configure your <parameter>launchConfiguration loadBalancers </parameter>
                            attributes with the load balancer pool UUID that was given to you as the <parameter>loadBalancerId</parameter>
                            and use <parameter>"RackConnect v3"</parameter>
                            for the <parameter>type</parameter>. Do not set a value for <parameter>port</parameter>.</para>
                    </listitem>
                </itemizedlist>
                <example><title>Example RackConnect v3 launchConfiguration with two load balancer pools</title>
                    <programlisting language="json">
                            <xi:include href="../samples/exampleRCv3launchConfig.json" parse="text"/>
                        </programlisting></example>
            </para>

            <para>For more information on RackConnect v3, see this
                    <link xlink:href="http://www.rackspace.com/cloud/hybrid/rackconnect">Overview</link>, and there are several <link
                    xlink:href="http://www.rackspace.com/knowledge_center/product-page/rackconnect">Knowledge Center articles</link>.</para>
        </section>
</chapter>